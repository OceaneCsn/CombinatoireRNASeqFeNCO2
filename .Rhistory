keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
tcc <- new("TCC", data, group)
#Normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = 0.01, floorPDEG = 0.05)
tcc$norm.factors
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
normalized.count <- getNormalizedData(tcc)
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
#DEtest
tcc <- estimateDE(tcc, test.method = "edger", FDR = 0.01, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1)
print(paste(dim(DEgenes)[1], " genes DE"))
top = DEgenes[1:5000,]
head(result)
plot(tcc, ylim = c(-11, 11), main = "Nitrate effect en conditions normales")
plot(tcc, group = c("group.","At_ElevatedCO2_HighNitrate_Fe"), main = "Effet CO2 en conditions normales", ylim = c(-11, 11))
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
mart = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "athaliana_eg_gene")
#self written functions for differential expression
source("./DEFunctions.R")
#self written functions for differential expression
source("./DEFunctions.R")
#self written functions for differential expression
source("./DEFunctions.R")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
mart = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "athaliana_eg_gene")
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/quantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
head(data)
dim(data)
# sample matching
annot <- read.csv("Code_for_RNAseq_CO2_N_Fr.csv", h = T, sep = ';')
conditions <- as.vector(unique(annot$Sample))
annot$ID <- paste0('R', annot$Code)
annot$condition <- substr(conditions, 1, nchar(conditions)-1)
cond <- unique(substr(conditions, 1, nchar(conditions)-1))
cond <- cond[grepl("At", cond)]
getCondition <- function(id){
# get condition without replicates
return(annot[annot$ID == id, "condition"])
}
getExactCondition <- function(id){
# get condition with sample
return(annot[annot$ID == id, "Sample"])
}
getLabel <- function(id, with.rep = T){
# get condition with sample in a simplified notation
text <- as.vector(annot[annot$ID == id, "Sample"])
res <- ''
nb <- substr(text, nchar(text), nchar(text))
if(grepl("Ambient", text)){res = paste0(res, "c")}
else{res = paste0(res, "C")}
if(grepl("High", text)){res = paste0(res, "N")}
else{res = paste0(res, "n")}
if(grepl("Starv", text)){res = paste0(res, "f")}
else{res = paste0(res, "F")}
if(with.rep) res = paste0(res, "_", nb)
return(res)
}
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
# sample matching
annot <- read.csv("Code_for_RNAseq_CO2_N_Fr.csv", h = T, sep = ';')
getLabel("R6", with.rep=F)
getLabel("R6")
getLabel("R6", with.rep=F)
getLabel("R6")
#quantification file
data <- read.csv("quantifFiles/quantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
head(data)
dim(data)
# sample matching
annot <- read.csv("Code_for_RNAseq_CO2_N_Fr.csv", h = T, sep = ';')
conditions <- as.vector(unique(annot$Sample))
annot$ID <- paste0('R', annot$Code)
annot$condition <- substr(conditions, 1, nchar(conditions)-1)
cond <- unique(substr(conditions, 1, nchar(conditions)-1))
cond <- cond[grepl("At", cond)]
getCondition <- function(id){
# get condition without replicates
return(annot[annot$ID == id, "condition"])
}
getExactCondition <- function(id){
# get condition with sample
return(annot[annot$ID == id, "Sample"])
}
getLabel <- function(id, with.rep = T){
# get condition with sample in a simplified notation
text <- as.vector(annot[annot$ID == id, "Sample"])
res <- ''
nb <- substr(text, nchar(text), nchar(text))
if(grepl("Ambient", text)){res = paste0(res, "c")}
else{res = paste0(res, "C")}
if(grepl("High", text)){res = paste0(res, "N")}
else{res = paste0(res, "n")}
if(grepl("Starv", text)){res = paste0(res, "f")}
else{res = paste0(res, "F")}
if(with.rep) res = paste0(res, "_", nb)
return(res)
}
getLabel("R6")
getLabel("R6", with.rep=F)
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
group
colnames(data)
#quantification file
data <- read.csv("quantifFiles/quantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
head(data)
dim(data)
# sample matching
annot <- read.csv("Code_for_RNAseq_CO2_N_Fr.csv", h = T, sep = ';')
conditions <- as.vector(unique(annot$Sample))
annot$ID <- paste0('R', annot$Code)
annot$condition <- substr(conditions, 1, nchar(conditions)-1)
cond <- unique(substr(conditions, 1, nchar(conditions)-1))
cond <- cond[grepl("At", cond)]
getCondition <- function(id){
# get condition without replicates
return(annot[annot$ID == id, "condition"])
}
getExactCondition <- function(id){
# get condition with sample
return(annot[annot$ID == id, "Sample"])
}
getLabel <- function(id, with.rep = T){
# get condition with sample in a simplified notation
text <- as.vector(annot[annot$ID == id, "Sample"])
res <- ''
nb <- substr(text, nchar(text), nchar(text))
if(grepl("Ambient", text)){res = paste0(res, "c")}
else{res = paste0(res, "C")}
if(grepl("High", text)){res = paste0(res, "N")}
else{res = paste0(res, "n")}
if(grepl("Starv", text)){res = paste0(res, "f")}
else{res = paste0(res, "F")}
if(with.rep) res = paste0(res, "_", nb)
return(res)
}
colnames(data)
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
getExpression("AT1G01010")
getExpression(data, "AT1G01010")
a<- getExpression(data, "AT1G01010")
a <- getExpression(data, "AT1G01010")
a <- getExpression(data, "AT1G01010")
a
#self written functions for differential expression
source("./DEFunctions.R")
a <- getExpression(data, "AT1G01010")
a
head(data)
#self written functions for differential expression
source("./DEFunctions.R")
a <- getExpression(data, "AT1G01010")
a
a <- getExpression(data, "AT1G01010")
a <- getExpression(data, "AT1G01010")
normalized.count = data
gene = "AT1G01010"
if (length(conds) ==1){
conds = colnames(normalized.count)
}
conds = "all"
if (length(conds) ==1){
conds = colnames(normalized.count)
}
df <- normalized.count[gene, conds]
View(df)
d<- melt(df)
d$group = str_split_fixed(rownames(d), "_", 2)[,1]
View(d)
rownames(d)
d$group = str_split_fixed(d$variable, "_", 2)[,1]
p <- ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) +
ggtitle(paste("Normalized expression for ", gene))
print(df)
return(p)
#self written functions for differential expression
source("./DEFunctions.R")
getExpression(data, "AT1G01010")
d<- melt(df, quiet=T)
d<- melt(df, verbose=F)
d<- melt(df, silent=T)
labels <- c("cnF", "cNF")
r <- dualDE(labels, pval = 0.01)
labels <- c("cnF", "CnF")
r <- dualDE(labels, pval = 0.01)
labels <- c("cNF", "CNF")
r <- dualDE(labels, pval = 0.01)
dualDE <- function(data, labels, pval=0.01, method="edger"){
# selecting the right labels for pairwise comparison
data <- data[,grepl(labels[1], colnames(data)) | grepl(labels[2], colnames(data))]
group <- str_split_fixed(colnames(data), "_", 2)[,1]
# tcc object
tcc <- new("TCC", data, group)
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
tcc$norm.factors
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
normalized.count <- getNormalizedData(tcc)
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
#DEtest
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1)
print(paste(dim(DEgenes)[1], " genes DE"))
head(result)
plot(tcc)
}
r <- dualDE(labels, pval = 0.01)
r <- dualDE(data, labels, pval = 0.01)
data <- data[,grepl(labels[1], colnames(data)) | grepl(labels[2], colnames(data))]
group <- str_split_fixed(colnames(data), "_", 2)[,1]
# tcc object
tcc <- new("TCC", data, group)
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
print(tcc$norm.factors)
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
normalized.count <- getNormalizedData(tcc)
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
#DEtest
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1)
print(paste(dim(DEgenes)[1], " genes DE"))
head(result)
method="edger"
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1)
print(paste(dim(DEgenes)[1], " genes DE"))
head(result)
plotMDS(tcc)
print(result)
heatmap(normalized.count[DEgenes,])
View(DEgenes)
heatmap(normalized.count[DEgenes$gene_id,])
tcc$private
libs <- c("shiny", "shinydashboard", "shinyWidgets", "plotly", "dplyr", "DT", "heatmaply", "tidyr","utils","rmarkdown","data.table","RColorBrewer", "knitr", "cluster", "shinycssloaders", "shinyBS", "MASS", "TCC")
# Install packages if missing
for (i in libs){
if( !is.element(i, .packages(all.available = TRUE)) ) {
BiocManager::install(i, suppressUpdates=TRUE)
}
}
View(annot)
annot[,c("ID", "condition")]
write.csv(file = "conditions.txt", annot[,c("ID", "condition")], row.names = F)
write.csv(file = "conditions.txt", annot[,c("ID", "condition")], row.names = F, quote = F)
shiny::runGitHub("TCC-GUI", "swsoyee", subdir = "TCC-GUI", launch.browser = TRUE)
plotMDS(normalized.count)
plot(tcc)
plot(tcc, col=2)
plot(tcc, col.tag=2)
plot(tcc)
View(DEgenes)
DEgenes$upreg = ifelse(DEgenes$m.value > 1, 1, 0)
#self written functions for differential expression
source("./DEFunctions.R")
r <- dualDE(data, labels, pval = 0.01)
getOneFactorComparisons <- function(factor = 'C'){
if(factor == 'C') pos = 1
else if(factor == 'n') pos = 2
else if(factor =='f') pos = 3
poss = seq(1:3)
others = poss[poss != pos]
res = c()
for(comp in comparables){
labels = str_split_fixed(comp, '-', 2)
diffFactor = substr(labels[1], pos, pos) != substr(labels[2], pos, pos)
other1 = substr(labels[1], others[1], others[1]) == substr(labels[2], others[1], others[1])
other2 = substr(labels[1], others[2], others[2]) == substr(labels[2], others[2], others[2])
if (diffFactor & other1 & other2 & grepl(factor, labels[1])){
res = c(res, comp)
}
}
return(res)
}
comps = getOneFactorComparisons('c')
comparables = c()
for(c1 in unique(group)){
for(c2 in unique(group)){
nb_diffs=0
for(i in seq(1,3)){
if(str_split(c1, "")[[1]][i] != str_split(c2, "")[[1]][i]){
nb_diffs= nb_diffs+1
}
}
if(nb_diffs==1){
comparables = c(comparables, paste0(c1, "-", c2))
}
}
}
group <- sapply(colnames(data), getLabel, with.rep = F)
#quantification file
data <- read.csv("quantifFiles/quantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
# sample matching
annot <- read.csv("Code_for_RNAseq_CO2_N_Fr.csv", h = T, sep = ';')
conditions <- as.vector(unique(annot$Sample))
annot$ID <- paste0('R', annot$Code)
annot$condition <- substr(conditions, 1, nchar(conditions)-1)
cond <- unique(substr(conditions, 1, nchar(conditions)-1))
cond <- cond[grepl("At", cond)]
getCondition <- function(id){
# get condition without replicates
return(annot[annot$ID == id, "condition"])
}
getExactCondition <- function(id){
# get condition with sample
return(annot[annot$ID == id, "Sample"])
}
getLabel <- function(id, with.rep = T){
# get condition with sample in a simplified notation
text <- as.vector(annot[annot$ID == id, "Sample"])
res <- ''
nb <- substr(text, nchar(text), nchar(text))
if(grepl("Ambient", text)){res = paste0(res, "c")}
else{res = paste0(res, "C")}
if(grepl("High", text)){res = paste0(res, "N")}
else{res = paste0(res, "n")}
if(grepl("Starv", text)){res = paste0(res, "f")}
else{res = paste0(res, "F")}
if(with.rep) res = paste0(res, "_", nb)
return(res)
}
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
getExpression(data, "AT1G01010")
comparables = c()
for(c1 in unique(group)){
for(c2 in unique(group)){
nb_diffs=0
for(i in seq(1,3)){
if(str_split(c1, "")[[1]][i] != str_split(c2, "")[[1]][i]){
nb_diffs= nb_diffs+1
}
}
if(nb_diffs==1){
comparables = c(comparables, paste0(c1, "-", c2))
}
}
}
comps = getOneFactorComparisons('c')
comps = getOneFactorComparisons('c')
labels <- c("cnF", "CnF")
r <- dualDE(data, labels, pval = 0.01)
labels <- c("cNF", "CNF")
r <- dualDE(data, labels, pval = 0.01)
labels <- c("cNf", "CNf")
r <- dualDE(data, labels, pval = 0.01)
labels <- c("cnf", "Cnf")
r <- dualDE(data, labels, pval = 0.01)
View(r)
View(r)
genes = list()
labels <- c("cNF", "CNF")
genes <- dualDE(data, labels, pval = 0.01, method=method)
list[[paste(labels[1], labels[2])]] = genes$gene_id
paste(labels[1], labels[2])
list[paste(labels[1], labels[2])] = genes$gene_id
genes$gene_id
list[paste(labels[1], labels[2])] = as.vector(genes$gene_id)
list[[paste(labels[1], labels[2])]] = as.vector(genes$gene_id)
as.vector(genes$gene_id)
g[[paste(labels[1], labels[2])]] = as.vector(genes$gene_id)
g = list()
g[[paste(labels[1], labels[2])]] = as.vector(genes$gene_id)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
mart = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "athaliana_eg_gene")
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/quantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
getExpression(data, "AT1G01010")
g = list()
labels <- c("cNF", "CNF")
genes <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = as.vector(genes$gene_id)
labels <- c("cnF", "CnF")
genes <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes$gene_id
labels <- c("cNf", "CNf")
genes <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes$gene_id
labels <- c("cnf", "Cnf")
genes <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes$gene_id
library(ggVennDiagram)
library(VennDiagram)
ggVennDiagram(g, main = "Differentially expressed genes in reponse to CO2")
