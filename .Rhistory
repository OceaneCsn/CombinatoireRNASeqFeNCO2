}
# Run the application
shinyApp(ui = ui, server = server)
setwd("./Documents/Network_visualisation/")
library(shiny)
library(shinythemes)
library(DT)
library(visNetwork)
source("./DEFunctions.R")
setwd("./Documents/Network_visualisation/")
runApp()
runApp()
runApp()
load("./normalized.count_At.RData")
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3,1,9)
treatment <- gl(3,3)
print(d.AD <- data.frame(treatment, outcome, counts))
glm.D93 <- glm(counts ~ outcome + treatment, family = poisson())
anova(glm.D93)
summary(glm.D93)
groups <- str_split_fixed(colnames(normalized.count), "_", 2)[,1]
co2 <- str_split_fixed(groups, "", 3)[,1]
nitrate <- factor(str_split_fixed(groups, "", 3)[,2])
nitrate <- relevel(nitrate, "N")
fer <- factor(str_split_fixed(groups, "", 3)[,3])
fer = relevel(fer, "F")
covariates <- data.frame(row.names =colnames(data), co2,nitrate, fer)
View(covariates)
View(covariates)
View(covariates)
rownames(covariates) <- groups
rownames(covariates) <- colnames(normalized.count)
glmData <- melt(normalized.count)
View(glmData)
rownames(glmData) <- glmData$Var1
glmData <- melt(round(normalized.count, 0))
# On utilise le même gene pour faire plusieurs predictions (24 fois pas gene), dans des conditions diffrentes, cele ne nuit t il pas à l'hypothèse d'indépendance des individus?
colnames(glmData) <- c("gene", "Condition", "Counts")
str_split_fixed(glmData$Var2, "_", 2)[,1]
str_split_fixed(glmData$Condition, "_", 2)[,1]
str_split_fixed(groups, "", 3)[,1]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
str_split_fixed(groups, "", 3)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
setwd("./")
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire")
load("./GenesNitrate_At.RData")
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = normalized.count, subset = sharedBy3)
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData, subset = sharedBy3)
glmData <- melt(round(normalized.count[sharedBy3,], 0))
# On utilise le même gene pour faire plusieurs predictions (24 fois pas gene), dans des conditions diffrentes, cele ne nuit t il pas à l'hypothèse d'indépendance des individus?
colnames(glmData) <- c("gene", "Condition", "Counts")
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData, subset = sharedBy3)
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
anova(glm)
anova(glm, test = T)
anova(glm)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
suppressMessages(library(ggplot2))
library(gridExtra)
suppressMessages(library(coseq))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(knitr, warn.conflicts = F, quietly = T))
suppressMessages(library(TCC, warn.conflicts = F, quietly = T))
suppressMessages(library(biomartr))
suppressMessages(library(biomaRt))
suppressMessages(library(ggplot2))
suppressMessages(library(org.At.tair.db, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(DESeq2, warn.conflicts = F, quietly = T))
mart = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "athaliana_eg_gene")
#quantification file
data <- read.csv("quantifFiles/quantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
head(data)
dim(data)
# sample matching
annot <- read.csv("Code_for_RNAseq_CO2_N_Fr.csv", h = T, sep = ';')
conditions <- as.vector(unique(annot$Sample))
annot$ID <- paste0('R', annot$Code)
annot$condition <- substr(conditions, 1, nchar(conditions)-1)
cond <- unique(substr(conditions, 1, nchar(conditions)-1))
cond <- cond[grepl("At", cond)]
getCondition <- function(id){
# get condition without replicates
return(annot[annot$ID == id, "condition"])
}
getExactCondition <- function(id){
# get condition with sample
return(annot[annot$ID == id, "Sample"])
}
getLabel <- function(id, with.rep = T){
# get condition with sample in a simplified notation
text <- as.vector(annot[annot$ID == id, "Sample"])
res <- ''
nb <- substr(text, nchar(text), nchar(text))
if(grepl("Ambient", text)){res = paste0(res, "c")}
else{res = paste0(res, "C")}
if(grepl("High", text)){res = paste0(res, "N")}
else{res = paste0(res, "n")}
if(grepl("Starv", text)){res = paste0(res, "f")}
else{res = paste0(res, "F")}
if(with.rep) res = paste0(res, "_", nb)
return(res)
}
getLabel("R6")
getLabel("R6", with.rep=F)
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
tcc <- new("TCC", data, group)
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = 0.01, floorPDEG = 0.05)
tcc$norm.factors
tcc$DEGES$execution.time
#DEtest
tcc <- estimateDE(tcc, test.method = "edger", FDR = 0.01, design = model.matrix(~group))
a
d
tcc
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1)
View(DEgenes)
save(DEgenes$gene_id, file = "allDEGenes_At.RData")
View(DEgenes)
DEgenes
DEgenes$gene_id
save(DEgenes$gene_id, file = "allDEGenes_At.RData")
save(DEgenes$gene_id, file = "allDEGenes_At.RData")
DEgenes$gene_id
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
suppressMessages(library(ggplot2))
library(gridExtra)
suppressMessages(library(coseq))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(knitr, warn.conflicts = F, quietly = T))
suppressMessages(library(TCC, warn.conflicts = F, quietly = T))
suppressMessages(library(biomartr))
suppressMessages(library(biomaRt))
suppressMessages(library(ggplot2))
suppressMessages(library(org.At.tair.db, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(DESeq2, warn.conflicts = F, quietly = T))
mart = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "athaliana_eg_gene")
#quantification file
data <- read.csv("quantifFiles/quantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
head(data)
dim(data)
# sample matching
annot <- read.csv("Code_for_RNAseq_CO2_N_Fr.csv", h = T, sep = ';')
conditions <- as.vector(unique(annot$Sample))
annot$ID <- paste0('R', annot$Code)
annot$condition <- substr(conditions, 1, nchar(conditions)-1)
cond <- unique(substr(conditions, 1, nchar(conditions)-1))
cond <- cond[grepl("At", cond)]
getCondition <- function(id){
# get condition without replicates
return(annot[annot$ID == id, "condition"])
}
getExactCondition <- function(id){
# get condition with sample
return(annot[annot$ID == id, "Sample"])
}
getLabel <- function(id, with.rep = T){
# get condition with sample in a simplified notation
text <- as.vector(annot[annot$ID == id, "Sample"])
res <- ''
nb <- substr(text, nchar(text), nchar(text))
if(grepl("Ambient", text)){res = paste0(res, "c")}
else{res = paste0(res, "C")}
if(grepl("High", text)){res = paste0(res, "N")}
else{res = paste0(res, "n")}
if(grepl("Starv", text)){res = paste0(res, "f")}
else{res = paste0(res, "F")}
if(with.rep) res = paste0(res, "_", nb)
return(res)
}
getLabel("R6")
getLabel("R6", with.rep=F)
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
tcc <- new("TCC", data, group)
#Normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = 0.01, floorPDEG = 0.05)
tcc$norm.factors
tcc$DEGES$execution.time
normalized.count <- getNormalizedData(tcc)
#DEtest
tcc <- estimateDE(tcc, test.method = "edger", FDR = 0.01, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1)
DEgenes
DEgenes$gene_id
save(DEgenes$gene_id, file = "GenesAll_At.RData")
save(DEgenes$gene_id, file = "GenesAll_At.RData")
DEgenes <- DEgenes$gene_id
save(DEgenes, file = "test")
save(DEgenes, file = "DEgenesAllAt.RData")
load("./normalized.count_At.RData")
load("./DEgenesAllAt.RData")
glmData <- melt(round(normalized.count[DEgenes,], 0))
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
setwd("./")
Path = "~/Documents/CombinatoireFeNCO2/DEG_Combinatoire/MicroTom/FactorNitrate/"
load("./normalized.count_At.RData")
load("./DEgenesAllAt.RData")
glmData <- melt(round(normalized.count[DEgenes,], 0))
# On utilise le même gene pour faire plusieurs predictions (24 fois pas gene), dans des conditions diffrentes, cele ne nuit t il pas à l'hypothèse d'indépendance des individus?
colnames(glmData) <- c("gene", "Condition", "Counts")
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
a <- sample(glmData$nitrate)
sample(glmData$nitrate, replace = F)
glmDataTest$nitrate <- sample(glmData$nitrate, replace = F)
glmDataTest <- glmData
glmDataTest$nitrate <- sample(glmData$nitrate, replace = F)
glmDataTest$nitrate <- sample(glmData$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
glmData <- melt(round(normalized.count[DEgenes,], 0))
glmData <- sample(melt(round(normalized.count[DEgenes,], 0)))
glmData <- glmData[sample(rownames(glmData)),]
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData[!duplicated(lmData$gene),]
a <- glmData[!duplicated(glmData$gene),]
View(a)
hist(glmData$Condition)
summary(glmData$Condition)
glmData <- glmData[!duplicated(glmData$gene),]
summary(glmData$Condition)
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
head(glmData)
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
glmData <- glmData[sample(rownames(glmData), size=1000, replace = F),]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
glmData <- glmData[sample(rownames(glmData), size=100, replace = F),]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
glmData <- glmData[sample(rownames(glmData), size=100, replace = F),]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
View(glmData)
glmData <- glmData[sample(rownames(glmData), size=10, replace = F),]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
glmData <- melt(round(normalized.count[DEgenes,], 0))
glmData <- glmData[sample(rownames(glmData)),]
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[!duplicated(glmData$gene),]
summary(glmData$Condition)
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
head(glmData)
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
glmData <- glmData[sample(rownames(glmData), size=1000, replace = F),]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
summary(glm)
plot(glm)
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[!duplicated(glmData$gene),]
summary(glmData$Condition)
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
head(glmData)
glm <- glm(Counts ~ 1 + factor(Co2) * factor(nitrate) * factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
summary(glm)
boxplot(Counts ~ 1 + factor(Co2) * factor(nitrate) * factor(fer), data = glmData)
boxplot(Counts ~ factor(Co2) * factor(nitrate) * factor(fer), data = glmData)
boxplot(Counts ~ factor(Co2) + factor(nitrate) + factor(fer), data = glmData)
boxplot(Counts ~ factor(Co2) + factor(nitrate) + factor(fer), data = glmData)
boxplot(Counts ~ Co2, data = glmData)
boxplot(Counts, data = glmData)
boxplot(glmData$Counts, data = glmData)
boxplot(glmData$Counts ~ glmData$CO2)
glmData$CO2
boxplot(glmData$Counts ~ glmData$Co2)
glmData$Co2
summary(glmData$Co2)
glmData <- melt(round(normalized.count[DEgenes,], 0))
glmData <- glmData[sample(rownames(glmData)),]
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[!duplicated(glmData$gene),]
summary(glmData$Condition)
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
head(glmData)
glmData$Co2
boxplot(glmData$Counts ~ glmData$Co2)
boxplot(log(glmData$Counts) ~ glmData$Co2)
boxplot(log(glmData$Counts) ~ glmData$Co2 + glmData$nitrate + glmData$fer)
boxplot(log(glmData$Counts) ~ glmData$Co2 * glmData$nitrate * glmData$fer)
interaction(Co2, nitrate, fer)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer))) + geom_boxplot()
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts))) + geom_boxplot()
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
as.factor(Co2)
ifelse(glmData$nitrate == "N", 0, 1)
as.factor(ifelse(glmData$nitrate == "N", 0, 1))
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
setwd("./")
Path = "~/Documents/CombinatoireFeNCO2/DEG_Combinatoire/MicroTom/FactorNitrate/"
load("./normalized.count_At.RData")
load("./DEgenesAllAt.RData")
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
boxplot(log(glmData$Counts) ~ glmData$Co2 * glmData$nitrate * glmData$fer)
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
anova(glm)
summary(glm)
glmDataTest <- glmData
glmDataTest$nitrate <- sample(glmData$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
glmData <- melt(round(normalized.count[DEgenes,], 0))
glmData <- glmData[sample(rownames(glmData)),]
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[!duplicated(glmData$gene),]
summary(glmData$Condition)
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
head(glmData)
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
glmData <- glmData[sample(rownames(glmData), size=1000, replace = F),]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
plot(glm)
glmDataTest$nitrate <- sample(glmData$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
glmData <- glmData[sample(rownames(glmData), size=1000, replace = F),]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
plot(glm)
glmDataTest <- glmData
glmDataTest$nitrate <- sample(glmDataTest$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
glmData <- melt(round(normalized.count[DEgenes,], 0))
glmData <- glmData[sample(rownames(glmData)),]
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[!duplicated(glmData$gene),]
summary(glmData$Condition)
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
head(glmData)
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
glmData <- glmData[sample(rownames(glmData), size=1000, replace = F),]
glm <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmData)
plot(glm)
summary(glm)
glmDataTest <- glmData
glmDataTest$nitrate <- sample(glmDataTest$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + Co2 * nitrate * fer, family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
