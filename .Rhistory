res_at$ID
enrich_go_at <- unique(res_at$ID)
res_sl <- occurences[1:180,]
res_at <- unique(res_at$ID)
res_sl <- occurences[1:180,]$GO
occurences[1:180,]$GO
res_sl <- as.vector(occurences[1:180,]$GO)
intersect(res_at, res_sl)
common_go <- intersect(res_at, res_sl)
common_At <- At[res_at %in% common_go ,]
common_Sl <- Sl[res_sl %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
GO_list
common_At <- At[At$go_id %in% common_go ,]
common_Sl <- Sl[Sl$GO %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
GO_list
specie = "Arabidopsis"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
At <- OntologyProfile(At$ensembl_gene_id)
specie = "MicroTom"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
Sl <- read.csv(filename, h=T, sep = "\t")
go_sl <- as.vector(na.omit(Sl$GO))
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
go_at <- unique(At$go_id)
common_go <- intersect(go_sl, go_at)
print(paste0(length(common_go), "GO terms in common"))
common_At <- At[At$go_id %in% common_go ,]
common_Sl <- Sl[Sl$GO %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
df <- data.frame(GO = substr(names(unlist(GO_list)), 1, 10), Gene = unlist(GO_list))
df$specie <- ifelse(grepl("AT", df$Gene), "At", "Sl")
ordered_go <- common_go[order(-table(df$GO))]
kable(ranking <- na.omit(At[match(ordered_go, At$go_id),c("go_id", "definition_1006", "name_1006")]))
ranking$Gene_number <- length(GO_list[ranking$go_id])
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_brewer(palette="Accent")
GO_list
df <- data.frame(GO = substr(names(unlist(GO_list)), 1, 10), Gene = unlist(GO_list))
df$specie <- ifelse(grepl("AT", df$Gene), "At", "Sl")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
setwd("./")
library(reshape2)
library(PLNmodels)
library(corrplot)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(psych, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
library(visNetwork)
#self written functions for differential expression
source("./DEFunctions.R")
source("./Network_functions.R")
specie = "At"
load(paste0("./GenesCO2_",specie,".RData"))
load("./normalized.count_At.RData")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
specie = "At"
library(GENIE3)
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
data <- toVisNetworkData(net)
View(data)
ont <- OntologyProfile(V(net)$name, plot=F)
runApp('Documents/AppTest/Network_visualisation')
sharedBy3
intersect(TF$AGI,sharedBy3)
View(ont)
ont$ensembl_gene_id
data$nodes$id
match(ont$ensembl_gene_id, data$nodes$id)
match(data$nodes$id, ont$ensembl_gene_id)
ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$Ontology <- ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$description <-ont[match(data$nodes$id, ont$ensembl_gene_id),]$description
data$nodes
save(data, file = "./DataNetworkGenieCO2Clusters.RData")
runApp('Documents/AppTest/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire")
library(CoRegNet)
load("normalized.count_At.RData")
load("GenesCO2_At.RData")
data(CIT_BLCA_EXP,HumanTF,CIT_BLCA_Subgroup)
HumanTF
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
library(strinr)
library(stringr)
data(CIT_BLCA_EXP,HumanTF,CIT_BLCA_Subgroup)
load("normalized.count_At.RData")
load("GenesCO2_At.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
TF
head(intersect(rownames(normalized.count),TF$AGI))
normalized.count[sharedBy3,]
options("mc.cores"=6)
grn = hLICORN(normalized.count[sharedBy3,], TFlist=TF$AGI, parallel = "multicore", verbose = T)
grn = hLICORN(normalized.count[sharedBy3,], TFlist=TF$AGI, parallel = "multicore", verbose = T, minGeneSupport = 0.05)
grn = hLICORN(normalized.count[sharedBy3,], TFlist=TF$AGI, parallel = "multicore", verbose = T, minGeneSupport = 0.01)
grn = hLICORN(normalized.count[sharedBy3,], TFlist=TF$AGI, parallel = "multicore", verbose = T, minGeneSupport = 0.001)
grn = hLICORN(normalized.count[sharedBy3,], TFlist=TF$AGI, parallel = "multicore", verbose = T, minGeneSupport = 0)
load("GenesNitrate_At.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
head(intersect(rownames(normalized.count),TF$AGI))
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
intersect(rownames(normalized.count),TF$AGI)
rownames(normalized.count)
TF$AGI
intersect(rownames(normalized.count),as.vector(TF$AGI))
as.vector(TF$AGI)
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
intersect(rownames(normalized.count),as.vector(TF$AGI))
intersect(rownames(normalized.count[sharedBy3,]),as.vector(TF$AGI))
options("mc.cores"=6)
grn = hLICORN(normalized.count[sharedBy3,], TFlist=TF$AGI, parallel = "multicore", verbose = T, minGeneSupport = 0)
print(grn)
normalized.count[sharedBy3,]
TF$AGI
discexp = discretizeExpressionData(normalized.count[sharedBy3,],refSamples=c("cNF_1", "cNF_2", "cNF_3"))
View(discexp)
library(ggplot2)
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
View(data)
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
df <- data[c("pos", "cp")]
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
df <- data[c("Pos", "Cp")]
View(df)
data <- data[!grepl("<", data$Status),]
data <- data[!grepl(">", data$Status),]
df <- data[c("Pos", "Cp")]
genes <- list("A" = "UBQ10", B = "ACT2")
View(genes)
genes <- list("A" = "UBQ10", "B" = "ACT2", "C"= "NRT2.1", "D"= "NRT1.1", "E" = "BT1", "F"="BT2", "G"="HRS1")
substr(df$Pos, 1, 2)
substr(df$Pos, 1, 1)
genes[[substr(df$Pos, 1, 1)]]
getGene <- function(letter){return(genes[[letter]])}
sapply(substr(df$Pos, 1, 1), getGene)
df$gene <- as.vector(sapply(substr(df$Pos, 1, 1), getGene))
substr(df$Pos,2, nchar(df$Pos))
df$Pos
Pos = B12
Pos = 'B12'
as.numeric(substr(Pos,2, nchar(Pos)))
getCondition <- function(Pos){
number <- as.numeric(substr(Pos,2, nchar(Pos)))
if(number <5) return("aCO2")
else return("eCO2")
}
ds$co2 <- sapply(df$Pos, getCondition)
getCondition <- function(Pos){
print(Pos)
number <- as.numeric(substr(Pos,2, nchar(Pos)))
if(number <5) return("aCO2")
else return("eCO2")
}
sapply(df$Pos, getCondition)
getCondition <- function(Pos){
print(Pos)
print(nchar(Pos))
number <- as.numeric(substr(Pos,2, nchar(Pos)))
if(number <5) return("aCO2")
else return("eCO2")
}
sapply(df$Pos, getCondition)
getCondition <- function(Pos){
print(Pos)
print(nchar(as.vector(Pos)))
number <- as.numeric(substr(Pos,2, nchar(Pos)))
if(number <5) return("aCO2")
else return("eCO2")
}
sapply(df$Pos, getCondition)
getCondition <- function(Pos){
print(Pos)
print(nchar(as.vector(Pos)))
number <- as.numeric(substr(Pos,2, nchar(as.vector(Pos))))
if(number <5) return("aCO2")
else return("eCO2")
}
sapply(df$Pos, getCondition)
ds$co2 <- sapply(df$Pos, getCondition)
df$co2 <- sapply(df$Pos, getCondition)
getCondition <- function(Pos){
print(Pos)
print(nchar(as.vector(Pos)))
number <- as.numeric(substr(Pos,2, nchar(as.vector(Pos))))
if(number <9) return("aCO2")
else return("eCO2")
}
df$co2 <- sapply(df$Pos, getCondition)
getCondition <- function(Pos){
number <- as.numeric(substr(Pos,2, nchar(as.vector(Pos))))
if(number <9) return("aCO2")
else return("eCO2")
}
df$co2 <- sapply(df$Pos, getCondition)
ggplot(data = df, aes(x=interaction(gene,CO2), y = Cp)) + geom_boxplot()
ggplot(data = df, aes(x=interaction(gene,CO2), y = Cp, fill = gene)) + geom_boxplot(alpha = 0.4)
ggplot(data = df, aes(x=interaction(CO2,gene), y = Cp, fill = gene)) + geom_boxplot(alpha = 0.4)
ggplot(data = df, aes(x=interaction(CO2,gene), y = Cp, fill = gene)) + geom_boxplot(alpha = 0.4) + geom_point(alpha=0.4)
ggplot(data = df, aes(x=interaction(CO2,gene), y = Cp, fill = gene, col = co2)) + geom_boxplot(alpha = 0.4) + geom_point(alpha=0.4)
ggplot(data = df, aes(x=interaction(CO2,gene), y = Cp, fill = gene)) + geom_boxplot(alpha = 0.4) + geom_point(alpha=0.4)
interaction(CO2,gene)
interaction(df$CO2,df$gene)
ggplot(data = df, aes(x=CO2 + gene, y = Cp, fill = gene)) + geom_boxplot(alpha = 0.4) + geom_point(alpha=0.4)
ggplot(data = df, aes(x=CO2, y = Cp, fill = gene)) + geom_boxplot(alpha = 0.4) + geom_point(alpha=0.4)
ggplot(data = df, aes(x=co2, y = Cp, fill = gene)) + geom_boxplot(alpha = 0.4) + geom_point(alpha=0.4)
ggplot(data = df, aes(x=gene, y = Cp, fill = co2)) + geom_boxplot(alpha = 0.4) + geom_point(alpha=0.4)
ggplot(data = df, aes(x=gene, y = Cp, fill = co2)) + geom_boxplot(alpha = 0.4)
ggplot(data = df, aes(x=gene, y = Cp, fill = co2)) + geom_points(alpha = 0.4)
ggplot(data = df, aes(x=gene, y = Cp, fill = co2)) + geom_point(alpha = 0.4)
ggplot(data = df, aes(x=gene, y = Cp, col = co2)) + geom_point(alpha = 0.4)
ggplot(data = df, aes(x=Pos, y = Cp, col = co2)) + geom_point(alpha = 0.4)
ggplot(data = df, aes(x=gene, y = Cp, col = co2)) + geom_point(alpha = 0.4)
ggplot(data = df, aes(x=interaction(gene, co2), y = Cp, col = co2)) + geom_point(alpha = 0.4)
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.4)
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7)
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,cex - 19 )
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size - 19 )
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size - 19 ) + ggtitle("qPCR Cp values")
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size - 19 ) + ggtitle("qPCR Cp values") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50", size = 14), plot.title = element_text( size = 14, face = "bold"))
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size = 19 ) + ggtitle("qPCR Cp values") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50", size = 14), plot.title = element_text( size = 14, face = "bold"))
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size = 9 ) + ggtitle("qPCR Cp values") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50", size = 14), plot.title = element_text( size = 14, face = "bold"))
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size = 2 ) + ggtitle("qPCR Cp values") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50", size = 14), plot.title = element_text( size = 14, face = "bold"))
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size = 4 ) + ggtitle("qPCR Cp values") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50", size = 14), plot.title = element_text( size = 14, face = "bold"))
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size = 3 ) + ggtitle("qPCR Cp values") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50", size = 14), plot.title = element_text( size = 14, face = "bold"))
source("DEFunctions.R")
getExpression("AT5G63160")
getExpression("AT5G63160", c("cnF", "CnF"))
library(gridExtra)
bt1 <- getExpression("AT5G63160", c("cnF", "CnF"))
bt2 <- getExpression("AT3G48360", c("cnF", "CnF"))
hrs1 <- getExpression("AT1G13300", c("cnF", "CnF"))
nrt1.1 <- getExpression("AT1G12110", c("cnF", "CnF"))
nrt2.1 <- getExpression("AT1G08090", c("cnF", "CnF"))
grid.arrange(bt1, bt2, hrs1, nrt1.1, nrt2.1)
grid.arrange(bt1, bt2, hrs1, nrt1.1, nrt2.1, nrow = 1)
ggplot(data = df, aes(x=interaction(co2, gene), y = Cp, col = co2)) + geom_point(alpha = 0.7,size = 3 ) + ggtitle("qPCR Cp values") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50", size = 14), plot.title = element_text( size = 14, face = "bold"))
ggplot(data = df, aes(x=interaction(co2, gene), y = log(Cp), col = co2)) + geom_point(alpha = 0.7,size = 3 ) + ggtitle("qPCR Cp values") +
theme(axis.text.x = element_text(angle = 320,
hjust = 0, colour = "grey50", size = 14), plot.title = element_text( size = 14, face = "bold"))
heatmapPerso <- function(normalized.count, genes, conds="all", specie="At"){
if(specie == "At") load("normalized.count_At.RData")
if(specie == "Sl") load("normalized.count_Sl.RData")
if (length(conds) ==1){
conds = colnames(normalized.count)
}else{conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))}
df <- data.frame(t(normalized.count[genes,conds]))
df$condition <- str_split_fixed(rownames(df), "_", 2)[,1]
df$exactCondition <- rownames(df)
data <- gather(data = df,
key = gene,
value = expression, -condition, -exactCondition)
exp.heatmap <- ggplot(data = data, mapping = aes(x = exactCondition,
y = gene,
fill = log(expression+0.1))) +
geom_tile() +
xlab(label = "Condition") +
# facet_grid makes two panels, one for control, one for flu:
facet_grid(~ condition, switch = "x", scales = "free_x", space = "free_x") + labs(fill = "Normalized expression") +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank()) + scale_fill_distiller(palette = "YlGnBu")
print(exp.heatmap)
}
heatmapPerso(normalized.count, genes=c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090" ))
source("Visu.R")
source("Visu.R")
heatmapPerso(normalized.count, genes=c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090" ))
heatmapPerso(normalized.count, genes=c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090"), conds = c("cnF", "CnF"))
heatmapPerso(normalized.count, genes=c("AT3G18780","AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090", "AT4G05320"), conds = c("cnF", "CnF"))
AGIToNames <- list("AT4G05320" = "UBQ10", "AT3G18780" = "ACT2", "AT1G08090"= "NRT2.1", "AT1G12110"= "NRT1.1", "AT5G63160" = "BT1", "AT3G48360"="BT2", "AT1G13300"="HRS1")
AGIToNames[[c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090")]]
AGIToNames[c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090")]
unlist(AGIToNames[c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090")])
as.vector(unlist(AGIToNames[c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090")]))
names <- as.vector(unlist(AGIToNames[c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090")]))
heatmapPerso <- function(normalized.count, genes, conds="all", specie="At", geneNames=NA){
if(specie == "At") load("normalized.count_At.RData")
if(specie == "Sl") load("normalized.count_Sl.RData")
if (length(conds) ==1){
conds = colnames(normalized.count)
}else{conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))}
df <- data.frame(t(normalized.count[genes,conds]))
df$condition <- str_split_fixed(rownames(df), "_", 2)[,1]
df$exactCondition <- rownames(df)
data <- gather(data = df,key = gene,value = expression, -condition, -exactCondition)
exp.heatmap <- ggplot(data = data, mapping = aes(x = exactCondition, y = gene,
fill = log(expression+0.1))) +
geom_tile() + xlab(label = "Condition") +
facet_grid(~ condition, switch = "x", scales = "free_x", space = "free_x") + labs(fill = "Normalized expression") +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank()) + scale_fill_distiller(palette = "YlGnBu")
if(!is.na(geneNames)) exp.heatmap = exp.heatmap + scale_x_discrete(labels=geneNames)
print(exp.heatmap)
}
names <- as.vector(unlist(AGIToNames[c("AT3G18780","AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090", "AT4G05320")]))
genes <- c("AT3G18780","AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090", "AT4G05320")
genes <- list("A" = "UBQ10", "B" = "ACT2", "C"= "NRT2.1", "D"= "NRT1.1", "E" = "BT1", "F"="BT2", "G"="HRS1")
TargetGenes <- c("AT3G18780","AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090", "AT4G05320")
names <- as.vector(unlist(AGIToNames[TargetGenes]))
heatmapPerso(normalized.count, genes=TargetGenes, conds = c("cnF", "CnF"),geneNames = names)
heatmapPerso(normalized.count, genes=c("AT5G63160","AT3G48360", "AT1G13300", "AT1G12110", "AT1G08090"))
heatmapPerso <- function(normalized.count, genes, conds="all", specie="At", geneNames=NA){
if(specie == "At") load("normalized.count_At.RData")
if(specie == "Sl") load("normalized.count_Sl.RData")
if (length(conds) ==1){
conds = colnames(normalized.count)
}else{conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))}
df <- data.frame(t(normalized.count[genes,conds]))
df$condition <- str_split_fixed(rownames(df), "_", 2)[,1]
df$exactCondition <- rownames(df)
data <- gather(data = df,key = gene,value = expression, -condition, -exactCondition)
exp.heatmap <- ggplot(data = data, mapping = aes(x = exactCondition, y = gene,
fill = log(expression+0.1))) +
geom_tile() + xlab(label = "Condition") +
facet_grid(~ condition, switch = "x", scales = "free_x", space = "free_x") + labs(fill = "Normalized expression") +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank()) + scale_fill_distiller(palette = "YlGnBu")
if(length(geneNames) > 1) exp.heatmap = exp.heatmap + scale_x_discrete(labels=geneNames)
print(exp.heatmap)
}
heatmapPerso(normalized.count, genes=TargetGenes, conds = c("cnF", "CnF"),geneNames = names)
heatmapPerso <- function(normalized.count, genes, conds="all", specie="At", geneNames=NA){
if(specie == "At") load("normalized.count_At.RData")
if(specie == "Sl") load("normalized.count_Sl.RData")
if (length(conds) ==1){
conds = colnames(normalized.count)
}else{conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))}
df <- data.frame(t(normalized.count[genes,conds]))
df$condition <- str_split_fixed(rownames(df), "_", 2)[,1]
df$exactCondition <- rownames(df)
data <- gather(data = df,key = gene,value = expression, -condition, -exactCondition)
exp.heatmap <- ggplot(data = data, mapping = aes(x = exactCondition, y = gene,
fill = log(expression+0.1))) +
geom_tile() + xlab(label = "Condition") +
facet_grid(~ condition, switch = "x", scales = "free_x", space = "free_x") + labs(fill = "Normalized expression") +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank()) + scale_fill_distiller(palette = "YlGnBu")
if(length(geneNames) > 1) {
print("coucou")
exp.heatmap = exp.heatmap + scale_x_discrete(labels=geneNames)
}
print(exp.heatmap)
}
heatmapPerso(normalized.count, genes=TargetGenes, conds = c("cnF", "CnF"),geneNames = names)
heatmapPerso <- function(normalized.count, genes, conds="all", specie="At", geneNames=NA){
if(specie == "At") load("normalized.count_At.RData")
if(specie == "Sl") load("normalized.count_Sl.RData")
if (length(conds) ==1){
conds = colnames(normalized.count)
}else{conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))}
df <- data.frame(t(normalized.count[genes,conds]))
df$condition <- str_split_fixed(rownames(df), "_", 2)[,1]
df$exactCondition <- rownames(df)
data <- gather(data = df,key = gene,value = expression, -condition, -exactCondition)
exp.heatmap <- ggplot(data = data, mapping = aes(x = exactCondition, y = gene,
fill = log(expression+0.1))) +
geom_tile() + xlab(label = "Condition") +
facet_grid(~ condition, switch = "x", scales = "free_x", space = "free_x") + labs(fill = "Normalized expression") +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank()) + scale_fill_distiller(palette = "YlGnBu")
if(length(geneNames) > 1) {
print("coucou")
exp.heatmap = exp.heatmap + scale_y_discrete(labels=geneNames)
}
print(exp.heatmap)
}
g
heatmapPerso(normalized.count, genes=TargetGenes, conds = c("cnF", "CnF"),geneNames = names)
heatmapPerso(normalized.count, genes=TargetGenes, conds = c("cnF", "CnF"))
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
data <- data[!grepl(">", data$Status),]
df <- data[c("Pos", "Cp")]
View(data)
View(data)
seq(1:dim(data):2)
seq(1:dim(data)[1]:2)
seq(1:dim(data)[1], step = 2)
seq(from = 1, to = dim(data)[1], step = 2)
seq(from = 1, to = dim(data)[1], by = 2)
data$Cp[seq(from = 1, to = dim(data)[1], by = 2)]
data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)]
data$Cp[seq(from = 1, to = dim(data)[1], by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)]
length(data$Cp[seq(from = 1, to = dim(data)[1], by = 2)])
length(data$Cp[seq(from = 2, to = dim(data)[1], by = 2)])
length(data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)])
length(data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)])
data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)]
diffCp <- data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)]
labels <- data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)]
data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)]
labels <- as.vector(data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)])
mean(data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)])
(data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] + data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)])/2
meanCp <- (data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] + data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)])/2
combinedData <- data.frame(Pos = labels, diffCp = diffCp, meanCp = meanCp)
View(combinedData)
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
diffCp <- data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)]
labels <- as.vector(data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)])
meanCp <- (data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] + data$Cp[seq(from = 2, to = dim(data)[1]-1, by = 2)])/2
data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)]
length(data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)])
diffCp <- data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1], by = 2)]
labels <- as.vector(data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)])
meanCp <- (data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] + data$Cp[seq(from = 2, to = dim(data)[1], by = 2)])/2
combinedData <- data.frame(Pos = labels, diffCp = diffCp, meanCp = meanCp)
filter(data, Cp > 26)
data <- filter(data, data$Cp > 26)
filter(data, data$Cp > 26)
data <- data[data$Cp > 26,]
diffCp <- data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1], by = 2)]
labels <- as.vector(data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)])
meanCp <- (data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] + data$Cp[seq(from = 2, to = dim(data)[1], by = 2)])/2
combinedData <- data.frame(Pos = labels, diffCp = diffCp, meanCp = meanCp)
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
data <- data[data$Cp < 26,]
diffCp <- data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1], by = 2)]
labels <- as.vector(data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)])
meanCp <- (data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] + data$Cp[seq(from = 2, to = dim(data)[1], by = 2)])/2
combinedData <- data.frame(Pos = labels, diffCp = diffCp, meanCp = meanCp)
as.vector(data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)])
data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)]
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
as.vector(data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)])
data[data$Cp < 26,]
data
data <- na.omit(data)
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
data <- data[data$Cp < 26,]
data <- na.omit(data)
diffCp <- data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1], by = 2)]
seq(from = 1, to = dim(data)[1]-1, by = 2)
seq(from = 1, to = dim(data)[1]-1)
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
data <- data[data$Cp < 26,]
data <- na.omit(data)
data <- read.table("AR1174qPCRControlesCinetiqueFaibleNitrate.txt", h = T, sep = '\t')
data <- data[data$Cp < 26,]
data <- data[data$Cp < 26,c("Cp", "Pos")]
data <- na.omit(data)
diffCp <- data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] - data$Cp[seq(from = 2, to = dim(data)[1], by = 2)]
labels <- as.vector(data$Pos[seq(from = 1, to = dim(data)[1]-1, by = 2)])
meanCp <- (data$Cp[seq(from = 1, to = dim(data)[1]-1, by = 2)] + data$Cp[seq(from = 2, to = dim(data)[1], by = 2)])/2
combinedData <- data.frame(Pos = labels, diffCp = diffCp, meanCp = meanCp)
combinedData$gene <- as.vector(sapply(substr(combinedData$Pos, 1, 1), getGene))
combinedData$co2 <- sapply(combinedData$Pos, getCondition)
combinedData$Pos
getCondition <- function(Pos){
number <- as.numeric(substr(Pos,2, nchar(as.vector(Pos))))
if(number <9) return("aCO2")
else return("eCO2")
}
sapply(combinedData$Pos, getCondition)
combinedData$co2 <- sapply(combinedData$Pos, getCondition)
Sys.getlocale()
