print(adegraphics::s.class(acp$li, xax =  1, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
print(s.corcircle(acp$co, xax=2, yax=3, fullcircle = FALSE, pback.col = "lightgrey"))
print(adegraphics::s.class(acp$li, xax =  2, yax = 3, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
print(s.corcircle(acp$co, xax=4, yax=2, fullcircle = FALSE, pback.col = "lightgrey"))
print(adegraphics::s.class(acp$li, xax =  4, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
}
ACP(data, clusteredGenes)
load("GenesCO2_At.RData")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
specie = "At"
clusteredGenes <- clustering(sharedBy3, data)
ACP(data, clusteredGenes)
ACP <- function(data, clusteredGenes){
acp <- dudi.pca(log(data+0.1), center = TRUE, scale = TRUE, scannf = FALSE, nf = 4)
print(summary(acp))
data$cluster = clusteredGenes[as.vector(rownames(data))]
print(s.corcircle(acp$co, xax=1, yax=2, fullcircle = FALSE, pback.col = "lightgrey"))
print(as.factor(data$cluster))
print(adegraphics::s.class(acp$li, xax =  1, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
print(s.corcircle(acp$co, xax=2, yax=3, fullcircle = FALSE, pback.col = "lightgrey"))
print(adegraphics::s.class(acp$li, xax =  2, yax = 3, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
print(s.corcircle(acp$co, xax=4, yax=2, fullcircle = FALSE, pback.col = "lightgrey"))
print(adegraphics::s.class(acp$li, xax =  4, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
}
ACP(data, clusteredGenes)
rownames(data)
clusteredGenes[as.vector(rownames(data))]
clusteredGenes
clusteredGenes[as.vector(rownames(data))]
as.vector(rownames(data))
clusteredGenes
as.vector(rownames(data))
ACP(data[sharedBy3], clusteredGenes)
ACP(data[sharedBy3,], clusteredGenes)
ACP <- function(data, clusteredGenes){
acp <- dudi.pca(log(data+0.1), center = TRUE, scale = TRUE, scannf = FALSE, nf = 4)
print(summary(acp))
data$cluster = clusteredGenes[as.vector(rownames(data))]
print(s.corcircle(acp$co, xax=1, yax=2, fullcircle = FALSE, pback.col = "lightgrey"))
print(as.factor(data$cluster))
print(adegraphics::s.class(acp$li, xax =  1, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
print(s.corcircle(acp$co, xax=2, yax=3, fullcircle = FALSE, pback.col = "lightgrey"))
print(adegraphics::s.class(acp$li, xax =  2, yax = 3, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
print(s.corcircle(acp$co, xax=4, yax=2, fullcircle = FALSE, pback.col = "lightgrey"))
print(adegraphics::s.class(acp$li, xax =  4, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
}
ACP(data[sharedBy3,], clusteredGenes)
data <- data[sharedBy3,]
acp <- dudi.pca(log(data+0.1), center = TRUE, scale = TRUE, scannf = FALSE, nf = 4)
print(summary(acp))
data$cluster = clusteredGenes[as.vector(rownames(data))]
print(s.corcircle(acp$co, xax=1, yax=2, fullcircle = FALSE, pback.col = "lightgrey"))
print(as.factor(data$cluster))
print(adegraphics::s.class(acp$li, xax =  1, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
ACP <- function(data, clusteredGenes){
acp <- dudi.pca(log(data+0.1), center = TRUE, scale = TRUE, scannf = FALSE, nf = 4)
print(summary(acp))
data$cluster = clusteredGenes[as.vector(rownames(data))]
print(s.corcircle(acp$co, xax=1, yax=2, fullcircle = FALSE, pback.col = "lightgrey"))
print(as.factor(data$cluster))
print(adegraphics::s.class(acp$li, xax =  1, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
print(s.corcircle(acp$co, xax=2, yax=3, fullcircle = FALSE, pback.col = "lightgrey"))
print(adegraphics::s.class(acp$li, xax =  2, yax = 3, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
print(s.corcircle(acp$co, xax=4, yax=2, fullcircle = FALSE, pback.col = "lightgrey"))
print(adegraphics::s.class(acp$li, xax =  4, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9)))
}
ACP(data[sharedBy3,], clusteredGenes)
ACP(data[sharedBy3,], clusteredGenes)
ACP <- function(data, clusteredGenes){
acp <- dudi.pca(log(data+0.1), center = TRUE, scale = TRUE, scannf = FALSE, nf = 4)
print(summary(acp))
data$cluster = clusteredGenes[as.vector(rownames(data))]
s.corcircle(acp$co, xax=1, yax=2, fullcircle = FALSE, pback.col = "lightgrey")
adegraphics::s.class(acp$li, xax =  1, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9))
s.corcircle(acp$co, xax=2, yax=3, fullcircle = FALSE, pback.col = "lightgrey")
adegraphics::s.class(acp$li, xax =  2, yax = 3, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9))
s.corcircle(acp$co, xax=4, yax=2, fullcircle = FALSE, pback.col = "lightgrey")
adegraphics::s.class(acp$li, xax =  4, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9))
}
ACP(data[sharedBy3,], clusteredGenes)
ACP <- function(data, clusteredGenes){
acp <- dudi.pca(log(data+0.1), center = TRUE, scale = TRUE, scannf = FALSE, nf = 4)
print(summary(acp))
data$cluster = clusteredGenes[as.vector(rownames(data))]
s.corcircle(acp$co, xax=1, yax=2, fullcircle = FALSE, pback.col = "lightgrey")
adegraphics::s.class(acp$li, xax =  1, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal", ylim = c(-9, 9))
s.corcircle(acp$co, xax=2, yax=3, fullcircle = FALSE, pback.col = "lightgrey")
adegraphics::s.class(acp$li, xax =  2, yax = 3, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal")
s.corcircle(acp$co, xax=4, yax=2, fullcircle = FALSE, pback.col = "lightgrey")
adegraphics::s.class(acp$li, xax =  4, yax = 2, as.factor(data$cluster), labels = as.character(levels(as.factor(data$cluster))), col = brewer.pal(n = 10, name = "Paired"), chullSize = 1, ellipseSize = 0, plabels.cex = 0.7, pbackground.col = "grey85", main = "Clusters dans le plan principal")
}
ACP(data[sharedBy3,], clusteredGenes)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
specie = "At"
#getExpression("AT1G01010")
g = list()
method = "edger"
labels <- c("cNF", "cnF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = as.vector(genes1)
d <- clustering(genes1$gene_id, data)
labels <- c("CNF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
labels <- c("cNf", "cnf")
genes3 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes3
labels <- c("CNf", "Cnf")
genes4 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes4
library(ggVennDiagram)
library(VennDiagram)
gene_list <- list()
for(comp in names(g)){
print( g[[comp]])
gene_list[[comp]] <- g[[comp]]$gene_id
}
ggVennDiagram(gene_list)
partitions <- get.venn.partitions(gene_list, keep.elements = T)
partitions$shared <- rowSums(partitions[1:4])
partitions <- partitions[order(-partitions$shared),]
d <- data.frame(matrix(ncol = 4, nrow=2))
colnames(d) <- names(g)
row.names(d) <- c("up", "down")
for(comp in names(g)){
d["up", comp] <- sum(g[[comp]]$upreg == 1)
d["down", comp] <- sum(g[[comp]]$upreg == 0)
}
res <- melt(d)
res$reg = rep(c("up", "down"), 4)
genesNitrateAt <- res
save(genesNitrateAt, file = "genesNitrateAt.RData")
ggplot(res, aes(fill=reg, y=value, x=variable)) +
geom_bar(position="stack", stat="identity", alpha=0.5, color = "black") +
ggtitle("Nitrate effet on gene regulation") +
xlab("") + ylab("Number of differentially expressed genes") + coord_flip()
common_genes <- unlist(partitions[1, "..values.."])
results <- getBM( filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id"),
values = common_genes, mart = mart)
results <- results[!rownames(results) %in% which(duplicated(results$ensembl_gene_id)), ]
kable(results)
sharedBy3 <- unique(unlist(subset(partitions, partitions$shared==3)$..values..))
a <- OntologyProfile(sharedBy3, specie = specie)
save(sharedBy3, file = paste0("GenesNitrate_", specie, ".RData"))
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
library(reshape2)
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
specie = "At"
g = list()
method = "edger"
labels <- c("cNF", "cNf")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
labels <- c("CNF", "CNf")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
labels <- c("cnF", "cnf")
genes3 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes3
labels <- c("CnF", "Cnf")
genes4 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes4
library(ggVennDiagram)
library(VennDiagram)
gene_list <- list()
for(comp in names(g)){
print( g[[comp]])
gene_list[[comp]] <- g[[comp]]$gene_id
}
ggVennDiagram(gene_list)
partitions <- get.venn.partitions(gene_list, keep.elements = T)
partitions$shared <- rowSums(partitions[1:4])
partitions <- partitions[order(-partitions$shared),]
# common_genes <- unlist(partitions[1, "..values.."])
# results <- getBM( filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id"),
#                     values = common_genes, mart = mart)
# results <- results[!rownames(results) %in% which(duplicated(results$ensembl_gene_id)), ]
# kable(results)
#
sharedBy3 <- unique(unlist(subset(partitions, partitions$shared==3)$..values..))
a <- OntologyProfileAt(sharedBy3)
save(sharedBy3, file = paste0("GenesIron_", specie, ".RData"))
load("GenesNitrate_At.RData")
clusteredGenes <- clustering(sharedBy3, data)
ACP(data[sharedBy3,], clusteredGenes)
load("GenesIron_At.RData")
clusteredGenes <- clustering(sharedBy3, data)
ACP(data[sharedBy3,], clusteredGenes)
BiocManager::install("EBSeq")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("D:/These/CombinatoireRNASeqFeNCO2")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/QuantifGenesTomate.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("D:/These/CombinatoireRNASeqFeNCO2")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/QuantifGenesTomate.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
load("normalized.count_At.RData")
library(EBSeq)
method = "edger"
labels <- c("cNF", "cnF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
headers <- c(colnames(data)[(grepl(labels[1], colnames(data)))] , colnames(data)[grepl(labels[2], colnames(data))])
norm <- normalized.count[genes1$gene_id,headers]
counts <- data[genes1$gene_id,]
NormData<- GetNormalizedMat(counts, MedianNorm(counts))
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(psych, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
specie = "At"
load(paste0("./GenesCO2_",specie,".RData"))
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
specie = "At"
clusteredGenes <- clustering(sharedBy3, data)
a <- OntologyProfile(sharedBy3)
a$cluster <- clusteredGenes[a$ensembl_gene_id]
entrezID <- list()
nb_clust = max(clusteredGenes)
for (clust in seq(1:nb_clust)) {
# print(entrez[entrez$cluster == clust,]$ensembl_transcript_id)
entrezID[[length(entrezID) + 1]] <- na.omit(a[a$cluster == clust, ]$entrezgene_id)
}
names(entrezID) <- as.character(seq(1:nb_clust))
ck <- compareCluster(geneCluster = entrezID, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05)
clusterProfiler::dotplot(ck, x = ~Cluster)
# On essaie un autre clustering avec lka librarie MPLN
#mpln (dataset = as.matrix(data[sharedBy3,]))
#beaucoup trop long, même mutlithreadé, c'est n'imp
load("./normalized.count_At.RData")
log.data <- log2(normalized.count[sharedBy3,]+1)
Norm.interest.corr<-corr.test(t(log.data), method="pearson", ci=F)
Norm.interest.corr$p[lower.tri( Norm.interest.corr$p,diag=-TRUE)]=NA
Pval.adj<- as.data.frame(as.table(Norm.interest.corr$p))
Norm.interest.corr$r[lower.tri(Norm.interest.corr$r,diag=TRUE)]=NA
Correlation<-  as.data.frame(as.table(Norm.interest.corr$r))
Cor.table<- na.exclude(cbind( Correlation, Pval.adj))[,c(1,2,3,6)]
colnames(Cor.table)<- c("gene1","gene2","cor","p.adj")
Cor.table.filt<- Cor.table [(abs(Cor.table[,3])>0.9 & Cor.table[,4]<0.01 ),]
g<-  graph.data.frame(  Cor.table.filt[,1:2],  directed=-FALSE)
V(g)$color <- clusteredGenes[V(g)]
degree<- degree(g)
hist(degree, breaks = 30)
betweenness<- betweenness(g)
hist(betweenness)
Node_nw_st<- data.frame( degree, betweenness)
plot.igraph(g, vertex.size = 5, vertex.label.cex = 0.3, color = clusteredGenes)
library(d3r)
data_json <- d3_igraph(g)
write(data_json, "data.json")
write.table(Cor.table.filt, "GraphCO2.txt", sep="\t", row.names=F, quote=F)
Rank_stat <- rowMeans(cbind(rank(Node_nw_st[,1]), rank(Node_nw_st[,2])))
Node_nw_st <- cbind(Node_nw_st, Rank_stat)
write.table(Node_nw_st,file="StatsCO2.txt", sep="\t", col.names = NA, quote=F)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("D:/These/CombinatoireRNASeqFeNCO2")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
load("normalized.count_At.RData")
library(EBSeq)
method = "edger"
labels <- c("cNF", "cnF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
headers <- c(colnames(data)[(grepl(labels[1], colnames(data)))] , colnames(data)[grepl(labels[2], colnames(data))])
norm <- normalized.count[genes1$gene_id,headers]
counts <- data[genes1$gene_id,]
NormData<- GetNormalizedMat(counts, MedianNorm(counts))
library(PLNmodels)
library(corrplot)
data(trichoptera)
trichoptera$Abundance
trichoptera$Covariate
trichoptera$Abundance
