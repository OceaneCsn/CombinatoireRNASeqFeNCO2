Node_nw_st<- data.frame( degree, betweenness)
plot.igraph(g, vertex.size = 5, vertex.label.cex = 0.3, color = clusteredGenes)
library(d3r)
data_json <- d3_igraph(g)
write(data_json, "data.json")
write.table(Cor.table.filt, "GraphCO2.txt", sep="\t", row.names=F, quote=F)
Rank_stat <- rowMeans(cbind(rank(Node_nw_st[,1]), rank(Node_nw_st[,2])))
Node_nw_st <- cbind(Node_nw_st, Rank_stat)
write.table(Node_nw_st,file="StatsCO2.txt", sep="\t", col.names = NA, quote=F)
log.data <- log2(normalized.count[sharedBy3,]+1)
Norm.interest.corr<-corr.test(t(log.data), method="pearson", ci=F)
Norm.interest.corr$p[lower.tri( Norm.interest.corr$p,diag=-TRUE)]=NA
Pval.adj<- as.data.frame(as.table(Norm.interest.corr$p))
Norm.interest.corr$r[lower.tri(Norm.interest.corr$r,diag=TRUE)]=NA
Correlation<-  as.data.frame(as.table(Norm.interest.corr$r))
Cor.table<- na.exclude(cbind( Correlation, Pval.adj))[,c(1,2,3,6)]
colnames(Cor.table)<- c("gene1","gene2","cor","p.adj")
Cor.table.filt<- Cor.table [(abs(Cor.table[,3])>0.9 & Cor.table[,4]<0.01 ),]
g<-  graph.data.frame(  Cor.table.filt[,1:2],  directed=-FALSE)
V(g)$color <- clusteredGenes[V(g)]
degree<- degree(g)
betweenness<- betweenness(g)
ggplot( aes(x=degree)) +geom_histogram( binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3") +
theme_ipsum() +
theme(
plot.title = element_text(size=15)
)
Node_nw_st<- data.frame(degree, betweenness)
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3") +
theme(plot.title = element_text(size=15))
log.data <- log2(normalized.count[sharedBy3,]+1)
Norm.interest.corr<-corr.test(t(log.data), method="pearson", ci=F)
Norm.interest.corr$p[lower.tri( Norm.interest.corr$p,diag=-TRUE)]=NA
Pval.adj<- as.data.frame(as.table(Norm.interest.corr$p))
Norm.interest.corr$r[lower.tri(Norm.interest.corr$r,diag=TRUE)]=NA
Correlation<-  as.data.frame(as.table(Norm.interest.corr$r))
Cor.table<- na.exclude(cbind( Correlation, Pval.adj))[,c(1,2,3,6)]
colnames(Cor.table)<- c("gene1","gene2","cor","p.adj")
Cor.table.filt<- Cor.table [(abs(Cor.table[,3])>0.9 & Cor.table[,4]<0.01 ),]
g<-  graph.data.frame(  Cor.table.filt[,1:2],  directed=-FALSE)
V(g)$color <- clusteredGenes[V(g)]
degree<- degree(g)
betweenness<- betweenness(g)
Node_nw_st<- data.frame(degree, betweenness)
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=3, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Bin size = 3") +
theme(plot.title = element_text(size=15))
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=2, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
ggtitle("Degree distribution") +
theme(plot.title = element_text(size=15))
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=2, fill="#69b3a2", color="#e9ecef", alpha=0.9) + geom_density()
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.9) + geom_density()
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.9) + geom_density(y = degree)
degree
View(Node_nw_st)
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.9) + geom_density(y = degree*88)
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.9) + geom_density(x = degree*88)
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.9)
ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( binwidth=1, fill="#E69F00", color="#e9ecef", alpha=0.9)
ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( binwidth=4, fill="#E69F00", color="#e9ecef", alpha=0.9)
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.7)
ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( binwidth=4, fill="#E69F00", color="#e9ecef", alpha=0.7)
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.7) +
ggtitle("Degree distribution") +
theme(plot.title = element_text(size=15))
ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( binwidth=4, fill="#E69F00", color="#e9ecef", alpha=0.7) +
ggtitle("Betweeness distribution") +
theme(plot.title = element_text(size=15))
PLN_network <- function(data, DEGenes, plot_path=F){
# covariables
groups <- str_split_fixed(colnames(data), "_", 2)[,1]
co2 <- str_split_fixed(groups, "", 3)[,1]
nitrate <- factor(str_split_fixed(groups, "", 3)[,2])
nitrate <- relevel(nitrate, "N")
fer <- factor(str_split_fixed(groups, "", 3)[,3])
fer = relevel(fer, "F")
covariates <- data.frame(row.names =colnames(data), co2,nitrate, fer)
# preparation des données
counts <- t(data[sharedBy3,])
plnData <- prepare_data(counts = counts, covariates = covariates)
network_models <- PLNnetwork(Abundance ~ nitrate + fer + co2 +offset(log(Offset)), data = plnData)
network_models
network_models$criteria %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models)
if(plot_path==T){
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
}
model_StARS <- getBestModel(network_models, "StARS")
net <- plot(model_StARS)
plot.igraph(net)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.5)
plot(model_StARS, type = "support", output = "corrplot")
# Verification des predictions du modele
data.frame(
fitted   = as.vector(fitted(model_StARS)),
observed = as.vector(counts)
) %>%
ggplot(aes(x = observed, y = fitted)) +
geom_point(size = .5, alpha =.25 ) +
scale_x_log10() +
scale_y_log10() +
theme_bw() + annotation_logticks()
return(net)
}
net <- PLN_network(data = data, DEGenes = sharedBy3)
plot.igraph(net, vertex.size = 5, vertex.label.cex = 0.3, color = clusteredGenes)
source("./Network_functions.R")
Node_nw_st <- netStats(g)
netStats <- function(g){
degree<- degree(g)
betweenness<- betweenness(g)
Node_nw_st<- data.frame(degree, betweenness)
ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.7) +
ggtitle("Degree distribution") +
theme(plot.title = element_text(size=15))
ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( binwidth=4, fill="#E69F00", color="#e9ecef", alpha=0.7) +
ggtitle("Betweeness distribution") +
theme(plot.title = element_text(size=15))
Rank_stat <- rowMeans(cbind(rank(Node_nw_st[,1]), rank(Node_nw_st[,2])))
Node_nw_st <- cbind(Node_nw_st, Rank_stat)
return(Node_nw_st)
}
Node_nw_st <- netStats(g)
netStats <- function(g){
degree<- degree(g)
betweenness<- betweenness(g)
Node_nw_st<- data.frame(degree, betweenness)
print(ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.7) +
ggtitle("Degree distribution") +
theme(plot.title = element_text(size=15)))
print(ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( binwidth=4, fill="#E69F00", color="#e9ecef", alpha=0.7) +
ggtitle("Betweeness distribution") +
theme(plot.title = element_text(size=15)))
Rank_stat <- rowMeans(cbind(rank(Node_nw_st[,1]), rank(Node_nw_st[,2])))
Node_nw_st <- cbind(Node_nw_st, Rank_stat)
return(Node_nw_st)
}
Node_nw_st <- netStats(g)
View(Node_nw_st)
Node_nw_st[order(Node_nw_st$Rank_stat)]
Node_nw_st[order(Node_nw_st$Rank_stat),]
Node_nw_st[order(-Node_nw_st$Rank_stat),]
net <- PLN_network(data = data, DEGenes = sharedBy3)
plot.igraph(net, vertex.size = 5, vertex.label.cex = 0.3, color = clusteredGenes)
V(net)$color <- clusteredGenes[V(net)]
plot.igraph(net, vertex.size = 5, vertex.label.cex = 0.3)
plot.igraph(net, vertex.label.cex = 0.3)
plot.igraph(net, vertex.size = 5, vertex.label.cex = 0.3)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.3)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.5)
Node_nw_st_pln <- netStats(net)
betweenness(net)
weigth(net)
weigths(net)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.5)
V(net)
V(g)
betweenness(net, directed=F)
betweenness(net, directed=T)
E(net)
length(E(net))
length(E(g))
normalized.count[1:10, 1:10]
round(normalized.count[1:10, 1:10], 1)
round(normalized.count[1:10, 1:10], 0)
PLN_network <- function(data, DEGenes, plot_path=F){
# covariables
groups <- str_split_fixed(colnames(data), "_", 2)[,1]
co2 <- str_split_fixed(groups, "", 3)[,1]
nitrate <- factor(str_split_fixed(groups, "", 3)[,2])
nitrate <- relevel(nitrate, "N")
fer <- factor(str_split_fixed(groups, "", 3)[,3])
fer = relevel(fer, "F")
covariates <- data.frame(row.names =colnames(data), co2,nitrate, fer)
# preparation des données
counts <- round(t(data[sharedBy3,]), 0)
plnData <- prepare_data(counts = counts, covariates = covariates)
network_models <- PLNnetwork(Abundance ~ nitrate + fer + co2 +offset(log(Offset)), data = plnData)
network_models
network_models$criteria %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models)
if(plot_path==T){
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
}
model_StARS <- getBestModel(network_models, "StARS")
net <- plot(model_StARS)
plot.igraph(net)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.5)
plot(model_StARS, type = "support", output = "corrplot")
# Verification des predictions du modele
data.frame(
fitted   = as.vector(fitted(model_StARS)),
observed = as.vector(counts)
) %>%
ggplot(aes(x = observed, y = fitted)) +
geom_point(size = .5, alpha =.25 ) +
scale_x_log10() +
scale_y_log10() +
theme_bw() + annotation_logticks()
return(net)
}
PLN_network <- function(data, DEGenes, plot_path=F){
# covariables
groups <- str_split_fixed(colnames(data), "_", 2)[,1]
co2 <- str_split_fixed(groups, "", 3)[,1]
nitrate <- factor(str_split_fixed(groups, "", 3)[,2])
nitrate <- relevel(nitrate, "N")
fer <- factor(str_split_fixed(groups, "", 3)[,3])
fer = relevel(fer, "F")
covariates <- data.frame(row.names =colnames(data), co2,nitrate, fer)
# preparation des données
counts <- round(t(data[sharedBy3,]), 0)
plnData <- prepare_data(counts = counts, covariates = covariates)
network_models <- PLNnetwork(Abundance ~ nitrate + fer + co2 +offset(log(Offset)), data = plnData)
network_models
network_models$criteria %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models)
if(plot_path==T){
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
}
model_StARS <- getBestModel(network_models, "StARS")
net <- plot(model_StARS)
plot.igraph(net)
#plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.5)
plot(model_StARS, type = "support", output = "corrplot")
# Verification des predictions du modele
data.frame(
fitted   = as.vector(fitted(model_StARS)),
observed = as.vector(counts)
) %>%
ggplot(aes(x = observed, y = fitted)) +
geom_point(size = .5, alpha =.25 ) +
scale_x_log10() +
scale_y_log10() +
theme_bw() + annotation_logticks()
return(net)
}
net_norm <- PLN_network(data = normalized.count, DEGenes = sharedBy3)
plot.igraph(net_norm, vertex.size = 10, vertex.label.cex = 0.5)
V(net_norm)$color <- clusteredGenes[V(net_norm)]
plot.igraph(net_norm, vertex.size = 10, vertex.label.cex = 0.5)
clusteredGenes <- clustering(sharedBy3, round(normalized.count, 0))
V(net_norm)$color <- clusteredGenes[V(net_norm)]
plot.igraph(net_norm, vertex.size = 10, vertex.label.cex = 0.5)
length(E(net_norm))
length(E(g))
length(E(net_norm))
length(E(g))
load("GenesNitrate_At.RData")
clusteredGenes <- clustering(sharedBy3, round(normalized.count, 0))
a <- OntologyProfile(sharedBy3)
a$cluster <- clusteredGenes[a$ensembl_gene_id]
entrezID <- list()
nb_clust = max(clusteredGenes)
for (clust in seq(1:nb_clust)) {
# print(entrez[entrez$cluster == clust,]$ensembl_transcript_id)
entrezID[[length(entrezID) + 1]] <- na.omit(a[a$cluster == clust, ]$entrezgene_id)
}
names(entrezID) <- as.character(seq(1:nb_clust))
ck <- compareCluster(geneCluster = entrezID, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05)
clusterProfiler::dotplot(ck, x = ~Cluster)
ACP(normalized.count[sharedBy3,], clusteredGenes)
log.data <- log2(normalized.count[sharedBy3,]+1)
Norm.interest.corr<-corr.test(t(log.data), method="pearson", ci=F)
Norm.interest.corr$p[lower.tri( Norm.interest.corr$p,diag=-TRUE)]=NA
Pval.adj<- as.data.frame(as.table(Norm.interest.corr$p))
Norm.interest.corr$r[lower.tri(Norm.interest.corr$r,diag=TRUE)]=NA
Correlation<-  as.data.frame(as.table(Norm.interest.corr$r))
Cor.table<- na.exclude(cbind( Correlation, Pval.adj))[,c(1,2,3,6)]
colnames(Cor.table)<- c("gene1","gene2","cor","p.adj")
Cor.table.filt<- Cor.table [(abs(Cor.table[,3])>0.9 & Cor.table[,4]<0.01 ),]
g<-  graph.data.frame(  Cor.table.filt[,1:2],  directed=-FALSE)
V(g)$color <- clusteredGenes[V(g)]
degree<- degree(g)
hist(degree, breaks = 30)
betweenness<- betweenness(g)
hist(betweenness)
Node_nw_st<- data.frame( degree, betweenness)
plot.igraph(g, vertex.size = 5, vertex.label.cex = 0.01, color = clusteredGenes)
net <- PLN_network(data = normalized.count, DEGenes = sharedBy3)
sample_genes <- sample(sharedBy3, 400)
net <- PLN_network(data = normalized.count, DEGenes = sample_genes)
sample_genes <- sample(sharedBy3, 100)
net <- PLN_network(data = normalized.count, DEGenes = sample_genes)
sample(sharedBy3, 100)
sample_genes <- sample(sharedBy3, 100)
net <- PLN_network(data = normalized.count, DEGenes = sample_genes)
PLN_network <- function(data, DEGenes, plot_path=F){
# covariables
groups <- str_split_fixed(colnames(data), "_", 2)[,1]
co2 <- str_split_fixed(groups, "", 3)[,1]
nitrate <- factor(str_split_fixed(groups, "", 3)[,2])
nitrate <- relevel(nitrate, "N")
fer <- factor(str_split_fixed(groups, "", 3)[,3])
fer = relevel(fer, "F")
covariates <- data.frame(row.names =colnames(data), co2,nitrate, fer)
# preparation des données
counts <- round(t(data[DEGenes,]), 0)
plnData <- prepare_data(counts = counts, covariates = covariates)
network_models <- PLNnetwork(Abundance ~ nitrate + fer + co2 +offset(log(Offset)), data = plnData)
network_models
network_models$criteria %>% head() %>% knitr::kable()
plot(network_models, "diagnostic")
plot(network_models)
if(plot_path==T){
coefficient_path(network_models, corr = TRUE) %>%
ggplot(aes(x = Penalty, y = Coeff, group = Edge, colour = Edge)) +
geom_line(show.legend = FALSE) +  coord_trans(x="log10") + theme_bw()
}
model_StARS <- getBestModel(network_models, "StARS")
net <- plot(model_StARS)
plot.igraph(net)
#plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.5)
plot(model_StARS, type = "support", output = "corrplot")
# Verification des predictions du modele
data.frame(
fitted   = as.vector(fitted(model_StARS)),
observed = as.vector(counts)
) %>%
ggplot(aes(x = observed, y = fitted)) +
geom_point(size = .5, alpha =.25 ) +
scale_x_log10() +
scale_y_log10() +
theme_bw() + annotation_logticks()
return(net)
}
sample_genes <- sample(sharedBy3, 200)
net <- PLN_network(data = normalized.count, DEGenes = sample_genes)
V(net)$color <- clusteredGenes[V(net)]
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.5)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4)
V(net)$size <- degree[V(net)]
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4)
plot.igraph(net, vertex.label.cex = 0.4)
V(net)$size <- degree[V(net)]*0.1
plot.igraph(net, vertex.label.cex = 0.4)
plot.igraph(net, vertex.label.cex = 0.4)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4, edge.size = 1)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4, edge.cex = 1)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4, edge.width = 1)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4, edge.width = 0.1)
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4, edge.width = 0.5)
hist(degree(V(net)))
hist(degree(net))
betweenness(net_norm)
betweenness(net_norm, weights = F)
betweenness(net_norm, weights = NA)
netStats <- function(g){
degree<- degree(g)
betweenness<- betweenness(g, weights=NA)
Node_nw_st<- data.frame(degree, betweenness)
print(ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.7) +
ggtitle("Degree distribution") +
theme(plot.title = element_text(size=15)))
print(ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( binwidth=4, fill="#E69F00", color="#e9ecef", alpha=0.7) +
ggtitle("Betweeness distribution") +
theme(plot.title = element_text(size=15)))
Rank_stat <- rowMeans(cbind(rank(Node_nw_st[,1]), rank(Node_nw_st[,2])))
Node_nw_st <- cbind(Node_nw_st, Rank_stat)
return(Node_nw_st[order(-Node_nw_st$Rank_stat),])
}
netStats(net)
netStats <- function(g){
degree<- degree(g)
betweenness<- betweenness(g, weights=NA)
Node_nw_st<- data.frame(degree, betweenness)
print(ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=1, fill="#69b3a2", color="#e9ecef", alpha=0.7) +
ggtitle("Degree distribution") +
theme(plot.title = element_text(size=15)))
print(ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( fill="#E69F00", color="#e9ecef", alpha=0.7) +
ggtitle("Betweeness distribution") +
theme(plot.title = element_text(size=15)))
Rank_stat <- rowMeans(cbind(rank(Node_nw_st[,1]), rank(Node_nw_st[,2])))
Node_nw_st <- cbind(Node_nw_st, Rank_stat)
return(Node_nw_st[order(-Node_nw_st$Rank_stat),])
}
netStats <- function(g){
degree<- degree(g)
betweenness<- betweenness(g, weights=NA)
Node_nw_st<- data.frame(degree, betweenness)
print(ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=2, fill="#69b3a2", color="#e9ecef", alpha=0.7) +
ggtitle("Degree distribution") +
theme(plot.title = element_text(size=15)))
print(ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( fill="#E69F00", color="#e9ecef", alpha=0.7) +
ggtitle("Betweeness distribution") +
theme(plot.title = element_text(size=15)))
Rank_stat <- rowMeans(cbind(rank(Node_nw_st[,1]), rank(Node_nw_st[,2])))
Node_nw_st <- cbind(Node_nw_st, Rank_stat)
return(Node_nw_st[order(-Node_nw_st$Rank_stat),])
}
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
setwd("./")
library(gridExtra)
library(reshape2)
library(PLNmodels)
library(corrplot)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(psych, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
load(paste0("./GenesCO2_",specie,".RData"))
specie = "At"
load(paste0("./GenesCO2_",specie,".RData"))
load("./genesNitrateSl.RData")
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire")
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire")
load("./genesNitrateSl.RData")
View(genesNitrateSl)
View(genesNitrateAt)
load("./genesNitrateAt.RData")
View(genesNitrateAt)
load("genesco2Sl.RData")
load("genesIronSl.RData")
load("genesNitrateSl.RData")
load("genesco2At.RData")
load("genesIronAt.RData")
load("genesNitrateAt.RData")
genesco2Sl$factor = "CO2"
genesNitrateSl$factor = "Nitrate"
genesIronSl$factor = "Iron"
dfSl <- rbind(genesco2Sl, genesIronSl, genesNitrateSl)
dfSl$Specie <- "Micro-Tom"
genesco2At$factor = "CO2"
genesNitrateAt$factor = "Nitrate"
genesIronAt$factor = "Iron"
dfAt <- rbind(genesco2At, genesIronAt, genesNitrateAt)
dfAt$Specie <- "A. thaliana"
ggplot(dfAt, aes(fill=reg, y=value, x=variable)) +
geom_bar(position="stack", stat="identity", size=1, alpha=0.5) +
ggtitle("CO2, Nitrate and Iron effet on gene regulation - A") + scale_fill_discrete("Set2") +
xlab("") + ylab("Number of differentially expressed genes") + coord_flip() + facet_grid(~ factor)
df <- rbind(dfSl, dfAt)
ggplot(df, aes(fill=reg, y=value, x=variable)) +
geom_bar(position="stack", stat="identity", size=0.3, alpha=0.5, color = "black") +
ggtitle("CO2, Nitrate and Iron effet on gene regulation") +
xlab("") + ylab("Number of differentially expressed genes") + coord_flip() + facet_grid(~ Specie)
ggplot(df, aes(fill=reg, y=value, x=variable)) +
geom_bar(position="stack", stat="identity", size=0.3, alpha=0.5, color = "black") +
ggtitle("CO2, Nitrate and Iron effet on gene regulation") +
xlab("") + ylab("Number of differentially expressed genes") + coord_flip() + facet_grid(~ factor)
ggplot(df, aes(fill=reg, y=value, x=variable)) +
geom_bar(position="stack", stat="identity", size=0.3, alpha=0.5, color = "black") +
ggtitle("CO2, Nitrate and Iron effet on gene regulation") +
xlab("") + ylab("Number of differentially expressed genes") + coord_flip() + facet_grid(~ factor + Specie)
