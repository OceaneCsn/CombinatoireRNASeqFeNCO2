theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.ticks = theme_blank(), axis.text.x = element_text(size = base_size *  0.8, angle = 330, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() +
scale_fill_distiller(palette = "RdPu") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  0.8, angle = 330, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  0.8, angle = 330, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  0.8, angle = 330, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 330, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 350, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 310, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320, hjust = 0, colour = "grey50"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50", plot.title = element_text( size = 14, face = "bold")))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
pval <- data.frame(pval)
pval$elements <- rownames(pval)
melted_pval <- melt(pval)
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("~/Documents/PremièreCinétique/")
suppressMessages(library(ggplot2))
library(gridExtra)
library(stringr)
library(wesanderson)
library(ggpubr)
library(ggplot2)
library(knitr)
#données à filtrer
data <- read.csv("CarboneAzote.csv", h = T, sep = ';', stringsAsFactors = F)
head(data)
data <- data[c("ID", "N.", "C.")]
colnames(data) <- c("ID", "TauxAzote", "TauxCarbone")
cinetique <- data[!grepl("co2", data$ID) & nchar(data$ID) > 0,]
combi <- data[grepl("co2", data$ID) ,]
tail(cinetique)
#conversion de tous les temps en heure
ExposureTimeInHour <- function(value){
#temps d'exposition au CO2 elevé, converti en heures
if(grepl("w", value)){
return(as.numeric(strsplit(value, "w")[1])*24*7)
}
if(grepl("d", value)){
return(as.numeric(strsplit(value, "d")[1])*24)
}
if(grepl("h", value)){
return(as.numeric(strsplit(value, "h")[1]))
}
}
cinetique$ExposureTime <- lapply(cinetique$ID, ExposureTimeInHour)
#formatage de l'experience en combinatoire
combi$CO2 <- str_split_fixed(combi$ID, ", ", 3)[,1]
combi$Nitrates <- gsub(",", ".", gsub("\\.", "", str_split_fixed(combi$ID, ", ", 3)[,2]))
combi$Fer <- str_split_fixed(combi$ID, ", ", 3)[,3]
combi <- combi[!grepl("-", combi$TauxAzote),]
combi$TauxAzote <- as.numeric(as.character(gsub(",", ".",combi$TauxAzote)))
combi$TauxCarbone <- as.numeric(as.character(gsub(",", ".",combi$TauxCarbone)))
combi$NCratio <- combi$TauxAzote/combi$TauxCarbone*1.0
combi$allFactors <- interaction(combi$Fer, combi$CO2, combi$Nitrates)
f <- ggplot(aes(y = NCratio, x = allFactors, linetype = Nitrates, color = Fer, fill = CO2), data = combi) +
geom_boxplot() + scale_fill_brewer(palette="Paired") +
geom_jitter(width=0.1,alpha=0.2) + scale_color_brewer(palette="Oranges") +
ggtitle("Nitrate/Carbon ratio") +
labs(x = "Facteurs (Nitrates, fer, CO2)", y = "N/C") +
theme(plot.title = element_text( size = 26, face = "bold"))
f
data <- data.frame(combi)
co2 <- as.factor(data$CO2)
fer <- as.factor(data$Fer)
azote <- as.factor(data$Nitrates)
y <- data$NCratio
#visu du modèle exhaustif d'ordre 1
plot(y ~ co2 * fer * azote)
#estimation du modèle
lm <- lm(y ~ co2 * fer * azote)
#matrice de design
kable(head(model.matrix(lm), 20))
#vérification des résidus
plot(lm)
#résultats
summary(lm)
an <- anova(lm)
lm2 <- lm(y ~ co2 + fer + azote + fer * co2 + fer * azote)
summary(lm2)
anova(lm2)
data <- read.csv("CinetiqueAnnotee.csv", h = T, sep = ';', stringsAsFactors = F)
tail(data)
data <- data[-nrow(data),]
elements <- unique(data$Element.Label)
data$MasseParMS <- data$X.µg.élts..G.MS.
data <- data[!grepl("Blank", data$Label), c("Tube", "Element.Label", "MasseParMS")]
data$MasseParMS <- lapply(data$MasseParMS, function(x) as.numeric(gsub(",", ".", gsub("\\.", "", x))))
#On enleve le potassium qui a plein de valeurs manquantes
elements <- elements[-3]
combi <- data[grepl("co2", data$Tube),]
#formatage de l'experience en combinatoire
combi$CO2 <- str_split_fixed(combi$Tube, ", ", 3)[,1]
combi$Nitrates <- gsub(",", ".", gsub("\\.", "", str_split_fixed(combi$Tube, ", ", 3)[,2]))
combi$Fer <- str_split_fixed(combi$Tube, ", ", 3)[,3]
#initialisation du tableau des pvalues de l'anova avec celles du lm N/C
results <- data.frame(matrix(ncol = length(lm$coefficients)-1, nrow = length(elements) + 1))
names(results) <- names(lm$coefficients)[-1]
rownames(results) <- c("N/C", elements)
results["N/C",] <- an$`Pr(>F)`[-length(an$`Pr(>F)`)]
#initialisation du tableau des pvalues des coefficients du lm avec celles du lm N/C
pval <- data.frame(matrix(ncol = length(lm$coefficients)-1, nrow = length(elements) + 1))
names(pval) <- names(lm$coefficients)[-1]
rownames(pval) <- c("N/C", elements)
pval["N/C",] <- summary(lm)$coefficients[,4][-1]
for(el in elements){
print(paste("--------------------", el,"--------------------" ))
data <- data.frame(combi[combi$Element.Label == el,])
co2 <- as.factor(data$CO2)
fer <- as.factor(data$Fer)
azote <- as.factor(data$Nitrates)
y <- unlist(data$MasseParMS)
lm <- lm(y ~ co2 * fer * azote)
print(summary(lm))
print(anova(lm))
an <- anova(lm)
results[el,] <- an$`Pr(>F)`[-length(an$`Pr(>F)`)]
pval[el,] <- summary(lm)$coefficients[,4][-1]
print(paste("--------------------", " ","--------------------" ))
}
library(reshape2)
results <- data.frame(results)
results$elements <- rownames(results)
melted_res <- melt(results)
pval <- data.frame(pval)
pval$elements <- rownames(pval)
melted_pval <- melt(pval)
base_size <- 9
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
library(reshape2)
results <- data.frame(results)
results$elements <- rownames(results)
melted_res <- melt(results)
pval <- data.frame(pval)
pval$elements <- rownames(pval)
melted_pval <- melt(pval)
base_size <- 9
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from ANOVA") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements from Linear Model") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
library(reshape2)
results <- data.frame(results)
results$elements <- rownames(results)
melted_res <- melt(results)
pval <- data.frame(pval)
pval$elements <- rownames(pval)
melted_pval <- melt(pval)
base_size <- 9
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - Linear Model") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 1))) +
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - Linear Model") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 1)))
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 3)))
melted_res$thr <- ifelse(melted_res$value < 0.05, melted_res$value < 0.05, ">0.05")
View(melted_res)
melted_res$thr <- ifelse(melted_res$value < 0.05, melted_res$value, ">0.05")
ggplot(melted_res, aes(variable, elements, fill= thr)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 3)))
melted_res$thr <- ifelse(melted_res$value < 0.05, melted_res$value, 1)
ggplot(melted_res, aes(variable, elements, fill= thr)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 3)))
ggplot(melted_pval, aes(variable, elements, fill= thr)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - Linear Model") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
melted_pval$thr <- ifelse(melted_pval$value < 0.05, melted_pval$value, 1)
ggplot(melted_pval, aes(variable, elements, fill= thr)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - Linear Model") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold"))
ggplot(melted_pval, aes(variable, elements, fill= thr)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - Linear Model") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 3)))
lm2 <- lm(y ~ co2 + fer + azote + fer * co2 + fer * azote)
summary(lm2)
anova(lm2)
library(reshape2)
results <- data.frame(results)
results$elements <- rownames(results)
melted_res <- melt(results)
pval <- data.frame(pval)
pval$elements <- rownames(pval)
melted_pval <- melt(pval)
base_size <- 9
ggplot(melted_res, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 3)))
melted_res$thr <- ifelse(melted_res$value < 0.05, melted_res$value, 1)
melted_pval$thr <- ifelse(melted_pval$value < 0.05, melted_pval$value, 1)
ggplot(melted_res, aes(variable, elements, fill= thr)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - ANOVA") +
scale_fill_distiller(palette = "RdPu", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 3)))
ggplot(melted_pval, aes(variable, elements, fill= value)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - Linear Model") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 3)))
ggplot(melted_pval, aes(variable, elements, fill= thr)) +
geom_tile() + ggtitle("Variable's P-Values depending on the elements - Linear Model") +
scale_fill_distiller(palette = "Purples", name = "P-value") +
theme_grey(base_size = base_size)  +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
theme(axis.text.x = element_text(size = base_size *  1.2, angle = 320,
hjust = 0, colour = "grey50"), plot.title = element_text( size = 14, face = "bold")) + geom_text(aes(label = round(value, 3)))
172/24
211/24
setwd("~/Documents/Combinatoire/")
library(ggplot2)
setwd("~/Documents/Combinatoire/")
data <- read.csv("LogsData.csv", h=T, sep = ',')
View(data)
ggplot(data, aes(x=UM))+
geom_density(color="darkblue", fill="lightblue")
mm <- ggplot(data, aes(x=MM))+
geom_density(color="darkblue", fill="lightred") +
ggtitle("Multu mapped reads")
ggplot(data, aes(x=MM))+
geom_density(color="darkblue", fill="lightred") +
ggtitle("Multu mapped reads")
ggplot(data, aes(x=MM))+
geom_density(color="darkblue", fill="lightred") +
ggtitle("Multu mapped reads")
mm <- ggplot(data, aes(x=MM))+
geom_density(color="darkblue", fill="red") +
ggtitle("Multu mapped reads")
ggplot(data, aes(x=MM))+
geom_density(color="darkblue", fill="red") +
ggtitle("Multu mapped reads")
ggplot(data, aes(x=UM))+
geom_density(color="darkgreen", fill="lightblue") +
ggtitle("Sequencing depth")
View(data)
ggplot(data, aes(x=MappedReads))+
geom_density(color="darkgreen", fill="lightblue") +
ggtitle("Sequencing depth")
melted_res <- melt(data)
library(reshape2)
melted_res <- melt(data)
View(melted_res)
melted_res <- melt(data[c("MM", "UM")])
View(melted_res)
p<-ggplot(data, aes(x=value, fill=variable)) +
geom_density()+
geom_vline(data=data, aes(xintercept=grp.mean, color=variable),
linetype="dashed")
p
p<-ggplot(melted_res, aes(x=value, fill=variable)) +
geom_density()+
geom_vline(data=melted_res, aes(xintercept=grp.mean, color=variable),
linetype="dashed")
p
p<-ggplot(melted_res, aes(x=value, fill=variable)) +
geom_density()
p
p<-ggplot(melted_res, aes(x=value, fill=variable)) +
geom_density(alpha=0.4)
p
um <- ggplot(data, aes(x=UM))+
geom_density(color="darkblue", fill="lightblue", alpha=0.4) +
ggtitle("Uniquely mapped reads")
mm <- ggplot(data, aes(x=MM))+
geom_density(color="darkred", fill="red", alpha=0.4) +
ggtitle("Multu mapped reads")
reads <- ggplot(data, aes(x=MappedReads))+
geom_density(color="darkgreen", fill="green", alpha=0.4) +
ggtitle("Sequencing depth")
grid.arrange(c(um, mm, reads), ncol = 3)
library(gridExtra)
grid.arrange(c(um, mm, reads), ncol = 3)
grid.arrange(um, mm, reads, ncol = 3)
ggplot(data, aes(x=MM))+
geom_density(color="darkred", fill="red", alpha=0.4) +
ggtitle("Multi-mapped reads") +coord_cartesian(ylim=c(0, 3))
ggplot(data, aes(x=MM))+
geom_density(color="darkred", fill="red", alpha=0.4) +
ggtitle("Multi-mapped reads") +coord_cartesian(xlim=c(0, 3))
ggplot(data, aes(x=MM))+
geom_density(color="darkred", fill="red", alpha=0.4) +
ggtitle("Multi-mapped reads") +coord_cartesian(xlim=c(1, 2))
ggplot(data, aes(x=UM))+
geom_density(color="darkblue", fill="lightblue", alpha=0.4) +
ggtitle("Uniquely mapped reads") coord_cartesian(xlim=c(80, 100))
ggplot(data, aes(x=UM))+
geom_density(color="darkblue", fill="lightblue", alpha=0.4) +
ggtitle("Uniquely mapped reads") + coord_cartesian(xlim=c(80, 100))
um <- ggplot(data, aes(x=UM))+
geom_density(color="darkblue", fill="lightblue", alpha=0.4) +
ggtitle("Uniquely mapped reads") + coord_cartesian(xlim=c(80, 100))
mm <- ggplot(data, aes(x=MM))+
geom_density(color="darkred", fill="red", alpha=0.4) +
ggtitle("Multi-mapped reads") +coord_cartesian(xlim=c(1, 2))
reads <- ggplot(data, aes(x=MappedReads))+
geom_density(color="darkgreen", fill="green", alpha=0.4) +
ggtitle("Sequencing depth")
grid.arrange(um, mm, reads, ncol = 3)
