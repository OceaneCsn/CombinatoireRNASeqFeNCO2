table(GO_list)
barplot(unlist(testList))
barplot(unlist(GO_list))
unlist(GO_list)
data.frame(unlist(GO_list))
a <- data.frame(unlist(GO_list))
a <- data.frame(unlist(GO_list))
View(a)
a <- data.frame(unlist(GO_list), row.names = T)
matrix(unlist(GO_list))
unlist(GO_list)
df <- data.frame(GO = names(unlist(GO_list)), Gene = unlist(GO_list))
View(df)
common_go
nchar(GO:0003677)
nchar("GO:0003677")
df <- data.frame(GO = substr(names(unlist(GO_list)), 1, 10), Gene = unlist(GO_list))
View(df)
ggplot(data = df, aes(x = GO)) + gghistogram()
ggplot(data = df, aes(x = GO)) + geom_histogram()
ggplot(data = df, aes(x = GO)) + geom_histogram(stat = "count")
df$specie <- iflse(grepl("AT", df$Gene), "At", "Sl")
df$specie <- ifelse(grepl("AT", df$Gene), "At", "Sl")
View(df)
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip()
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_discrete("Set2")
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_discrete("Set3")
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + + scale_color_brewer(palette="Accent")
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_color_brewer(palette="Accent")
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_brewer(palette="Accent")
table(df)
table(df$GO)
order(table(df$GO))
order(table(df$GO))
order(-table(df$GO))
common_go <- order(-table(df$GO))
common_go <- intersect(go_sl, go_at)
common_go [order(-table(df$GO))]
common_go
common_go[order(-table(df$GO))]
oreder_go <- common_go[order(-table(df$GO))]
oreder_go <- common_go[order(-table(df$GO))]
ordered_go <- common_go[order(-table(df$GO))]
At[match(At$go_id, ordered_go),]
ranking <- omit.na(At[match(At$go_id, ordered_go),])
na.omit(At[match(At$go_id, ordered_go),])
View(At)
ranking <- na.omit(At[match(At$go_id, ordered_go),c("go_id", "definition_1006", "name_1006")])
View(ranking)
ordered_go
ranking <- na.omit(At[match(ordered_go, At$go_id),c("go_id", "definition_1006", "name_1006")])
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_brewer(palette="Accent")
ranking <- na.omit(At[match(ordered_go, At$go_id),c("go_id", "definition_1006", "name_1006")])
kable(ranking <- na.omit(At[match(ordered_go, At$go_id),c("go_id", "definition_1006", "name_1006")]))
library(knitr, warn.conflicts = F, quietly = T)
kable(ranking <- na.omit(At[match(ordered_go, At$go_id),c("go_id", "definition_1006", "name_1006")]))
length(GO_list[[ranking$go_id]]
length(GO_list[[ranking$go_id]]
length(GO_list[[ranking$go_id]])
GO_list[[ranking$go_id]]
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_brewer(palette="Accent")
ego_At <- enrichGO(gene = At$ensembl_gene_id,
OrgDb = org.At.tair.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
At$ensembl_gene_id
ego_At <- enrichGO(gene = At$entrez_gene_id,
OrgDb = org.At.tair.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
At$entrez_gene_id
At$entrez_id
ego_At <- enrichGO(gene = At$entrezgene_id,
OrgDb = org.At.tair.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
#simpOnt <- simplify(ego)
# , cutoff=0.7, by="p.adjust", select_fun=min
#simpOnt@result$Description
print(barplot(ego, showCategory = 40, font.size = 5))
simpOnt <- simplify(ego)
simpOnt <- simplify(ego_At)
# , cutoff=0.7, by="p.adjust", select_fun=min
simpOnt@result$Description
#simpOnt <- simplify(ego_At)
# , cutoff=0.7, by="p.adjust", select_fun=min
ego_At@result$Description
print(barplot(ego_At, showCategory = 40, font.size = 5))
print(dotplot(ego, showCategory = 40, font.size = 5))
print(dotplot(ego_At, showCategory = 40, font.size = 5))
print(emapplot(ego, layout = "kk"))
print(emapplot(ego_At, layout = "kk"))
ego_At@result
max(ego_At@result$qvalue)
res <- subset(ego_At@result, qvalue > 0.01)
View(res)
res <- subset(ego_At@result, qvalue < 0.01)
org.At.tair.db
# microtom
ego_Sl <- enrichGO(gene = Sl$Solyc,
OrgDb = org.At.tair.db,
keyType = "Solyc",
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
getDatasets(mart = "plants_mart")
#suppressMessages(library(biomartr))
suppressMessages(library(biomaRt))
getDatasets(mart = "plants_mart")
biomatrt::getDatasets(mart = "plants_mart")
biomartr::getDatasets(mart = "plants_mart")
a <- biomartr::getDatasets(mart = "plants_mart")
View(a)
martSl = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "	slycopersicum_eg_gene")
martSl = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "slycopersicum_eg_gene")
biomartr::getAttributes(martSl)
biomartr::getAttributes(mart="plants_mart", dataset = "slycopersicum_eg_gene")
results <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id", "go_id", "definition_1006", "name_1006"),
values = ids, mart = martSl)
results <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id", "go_id", "definition_1006", "name_1006"),
values = Sl$Solyc, mart = martSl)
View(results)
biomartr::getFilters(mart="plants_mart", dataset = "slycopersicum_eg_gene")
results <- getBM(filters = "name", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id", "go_id", "definition_1006", "name_1006"),
values = Sl$Solyc, mart = martSl)
a <- biomartr::getFilters(mart="plants_mart", dataset = "slycopersicum_eg_gene")
View(a)
results <- getBM(filters = "ensembl_peptide_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id", "go_id", "definition_1006", "name_1006"),values = Sl$Solyc, mart = martSl)
ego_Sl <- enrichGO(gene = Sl$Solyc,
OrgDb = Sl,
keyType = "Solyc",
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
View(a)
shiny::runApp('Documents/AppTest/Network_visualisation')
View(result)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("./")
suppressMessages(library(ggplot2))
suppressMessages(library(gridExtra))
suppressMessages(library(ggpubr))
suppressMessages(library(stringr))
source("DEFunctions.R")
Path_to_genes = "~/Documents/CombinatoireFeNCO2/DEG_CombinatoireCO2_Fe_N/"
comp = c("cnF", "CnF")
specie = "Arabidopsis"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
At <- OntologyProfile(At$ensembl_gene_id)
specie = "MicroTom"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
Sl <- read.csv(filename, h=T, sep = "\t")
go_sl <- as.vector(na.omit(Sl$GO))
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
go_at <- unique(At$go_id)
common_go <- intersect(go_sl, go_at)
print(paste0(length(common_go), "GO terms in common"))
common_At <- At[At$go_id %in% common_go ,]
common_Sl <- Sl[Sl$GO %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
df <- data.frame(GO = substr(names(unlist(GO_list)), 1, 10), Gene = unlist(GO_list))
df$specie <- ifelse(grepl("AT", df$Gene), "At", "Sl")
ordered_go <- common_go[order(-table(df$GO))]
kable(ranking <- na.omit(At[match(ordered_go, At$go_id),c("go_id", "definition_1006", "name_1006")]))
ranking$Gene_number <- length(GO_list[ranking$go_id])
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_brewer(palette="Accent")
martSl = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "slycopersicum_eg_gene")
results <- getBM(filters = "ensembl_peptide_id", attributes = c("ensembl_gene_id", "description", "external_gene_name", "entrezgene_id", "go_id", "definition_1006", "name_1006"),values = Sl$Solyc, mart = martSl)
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
View(Sl)
GO <- go_sl[1]
catchGO <- function(GO){
return(sum(grepl(GO, Sl$GO)))
}
catchGO(GO)
grepl(GO, Sl$GO)
occurences <- sapply(go_sl, catchGO)
occurences
occurences <- data.frame(sapply(go_sl, catchGO))
View(occurences)
occurences <- occurences[order(occurences$sapply.go_sl..catchGO.),]
hist(occurences)
hist(occurences, breaks = 30)
summary(occurences)
occurences <- data.frame(sapply(go_sl, catchGO))
occurences[order(occurences$sapply.go_sl..catchGO.),]
View(occurences)
order(occurences$sapply.go_sl..catchGO.)
occurences <- data.frame(GO = go_sl, freq = sapply(go_sl, catchGO))
View(occurences)
occurences[oreder(occurences$sapply.go_sl..catchGO.),]
occurences[order(occurences$sapply.go_sl..catchGO.),]
occurences[order(occurences$freq),]
order(occurences$freq)
rownames(occurences) <- seq(1:length(occurences))
seq(1:length(occurences))
seq(1:dim(occurences)[1])
rownames(occurences) <- seq(1:dim(occurences)[1])
occurences[order(occurences$freq),]
occurences[order(-occurences$freq),]
occurences <- occurences[order(-occurences$freq),]
ggplot(data = occurences, aes(x = freq, fill = freq)) + geom_barplot(alpha = 0.5) + coord_flip() + scale_fill_brewer(palette="Accent")
ggplot(data = occurences, aes(x = freq, fill = freq)) + geom_bars(alpha = 0.5) + coord_flip() + scale_fill_brewer(palette="Accent")
ggplot(data = occurences, aes(x = freq, fill = freq)) + geom_bar(alpha = 0.5) + coord_flip() + scale_fill_brewer(palette="Accent")
ggplot(data = occurences, aes(x = freq, fill = freq)) + geom_bar(alpha = 0.5) + coord_flip()
ggplot(data = occurences, aes(x = freq, col = freq)) + geom_bar(alpha = 0.5) + coord_flip()
ggplot(data = occurences, aes(x = GO, y = freq, fill = freq)) + geom_bar(alpha = 0.5) + coord_flip()
ggplot(data = occurences, aes(x = GO, y = freq, fill = freq)) + geom_bar(stat="identity", alpha = 0.5) + coord_flip()
occurences <- data.frame(GO = go_sl, freq = sapply(go_sl, catchGO))
rownames(occurences) <- seq(1:dim(occurences)[1])
occurences <- occurences[order(-occurences$freq),]
ggplot(data = occurences, aes(x = GO, y = freq, fill = freq)) + geom_bar(stat="identity", alpha = 0.5) + coord_flip()
ggplot(data = occurences[1:30], aes(x = GO, y = freq, fill = freq)) + geom_bar(stat="identity", alpha = 0.5) + coord_flip()
ggplot(data = occurences[1:30,], aes(x = GO, y = freq, fill = freq)) + geom_bar(stat="identity", alpha = 0.5) + coord_flip()
ego_At <- enrichGO(gene = At$entrezgene_id,
OrgDb = org.At.tair.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
#simpOnt <- simplify(ego_At)
ego_At@result$Description
print(barplot(ego_At, showCategory = 40, font.size = 5))
print(dotplot(ego_At, showCategory = 40, font.size = 5))
print(emapplot(ego_At, layout = "kk"))
res <- subset(ego_At@result, qvalue < 0.01)
res_at <- res
View(res)
enrich_go_at <- intersect(go_at, res_at$ID)
res_at$ID
unique(res_at$ID)
go_at
View(res)
length(go_at)
length(unique(go_at))
length(res$ID)
shiny::runApp('Documents/AppTest/Network_visualisation')
res_at
unique(res_at$ID)
intersect(go_at, unique(res_at$ID))
go_at
res_at$ID
enrich_go_at <- unique(res_at$ID)
res_sl <- occurences[1:180,]
res_at <- unique(res_at$ID)
res_sl <- occurences[1:180,]$GO
occurences[1:180,]$GO
res_sl <- as.vector(occurences[1:180,]$GO)
intersect(res_at, res_sl)
common_go <- intersect(res_at, res_sl)
common_At <- At[res_at %in% common_go ,]
common_Sl <- Sl[res_sl %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
GO_list
common_At <- At[At$go_id %in% common_go ,]
common_Sl <- Sl[Sl$GO %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
GO_list
specie = "Arabidopsis"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
At <- OntologyProfile(At$ensembl_gene_id)
specie = "MicroTom"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
Sl <- read.csv(filename, h=T, sep = "\t")
go_sl <- as.vector(na.omit(Sl$GO))
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
go_at <- unique(At$go_id)
common_go <- intersect(go_sl, go_at)
print(paste0(length(common_go), "GO terms in common"))
common_At <- At[At$go_id %in% common_go ,]
common_Sl <- Sl[Sl$GO %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
df <- data.frame(GO = substr(names(unlist(GO_list)), 1, 10), Gene = unlist(GO_list))
df$specie <- ifelse(grepl("AT", df$Gene), "At", "Sl")
ordered_go <- common_go[order(-table(df$GO))]
kable(ranking <- na.omit(At[match(ordered_go, At$go_id),c("go_id", "definition_1006", "name_1006")]))
ranking$Gene_number <- length(GO_list[ranking$go_id])
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_brewer(palette="Accent")
GO_list
df <- data.frame(GO = substr(names(unlist(GO_list)), 1, 10), Gene = unlist(GO_list))
df$specie <- ifelse(grepl("AT", df$Gene), "At", "Sl")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
setwd("./")
library(reshape2)
library(PLNmodels)
library(corrplot)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(psych, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
library(visNetwork)
#self written functions for differential expression
source("./DEFunctions.R")
source("./Network_functions.R")
specie = "At"
load(paste0("./GenesCO2_",specie,".RData"))
load("./normalized.count_At.RData")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
specie = "At"
library(GENIE3)
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
data <- toVisNetworkData(net)
View(data)
ont <- OntologyProfile(V(net)$name, plot=F)
runApp('Documents/AppTest/Network_visualisation')
sharedBy3
intersect(TF$AGI,sharedBy3)
View(ont)
ont$ensembl_gene_id
data$nodes$id
match(ont$ensembl_gene_id, data$nodes$id)
match(data$nodes$id, ont$ensembl_gene_id)
ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$Ontology <- ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$description <-ont[match(data$nodes$id, ont$ensembl_gene_id),]$description
data$nodes
save(data, file = "./DataNetworkGenieCO2Clusters.RData")
runApp('Documents/AppTest/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
shiny::runApp('Documents/ShinyApp/Network_visualisation')
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
setwd("./")
library(reshape2)
library(PLNmodels)
library(corrplot)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(psych, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
library(visNetwork)
#self written functions for differential expression
source("./DEFunctions.R")
source("./Network_functions.R")
specie = "At"
load(paste0("./GenesCO2_",specie,".RData"))
load("./normalized.count_At.RData")
library(GENIE3)
for(thr in seq(0.05,0.39, by = 0.05)){
print(thr)
genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = thr)
}
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
setwd("./")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
for(thr in seq(0.05,0.39, by = 0.05)){
print(thr)
genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = thr)
}
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
data <- toVisNetworkData(net)
net
genie <- function(data, regressors=NA, targets=NA, nTrees=1000, nCores=5, thr = 0.3){
mat <- GENIE3(data, regulators = intersect(rownames(data),regressors), targets = targets ,treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
print(hist(mat))
kable(head(mat))
links <- getLinkList(mat, thr = thr)
g <- graph.data.frame(links, directed = F)
V(g)$color <- ifelse(V(g)$name %in% regressors, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$color)
netStats(g)
return(g)
}
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
genie <- function(data, regressors=NA, targets=NA, nTrees=1000, nCores=5, thr = 0.3){
mat <- GENIE3(data, regulators = intersect(rownames(data),regressors), targets = targets ,treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
print(hist(mat))
kable(head(mat))
links <- getLinkList(mat, thr = thr)
g <- graph.data.frame(links, directed = F)
V(g)$color <- ifelse(V(g)$name %in% regressors, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$color)
netStats(g)
return(g)
}
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
genie <- function(data, regressors=NA, targets=NA, nTrees=1000, nCores=5, thr = 0.3){
mat <- GENIE3(data, regulators = intersect(rownames(data),regressors), targets = targets ,treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
hist(mat)
kable(head(mat))
links <- getLinkList(mat, thr = thr)
g <- graph.data.frame(links, directed = F)
V(g)$color <- ifelse(V(g)$name %in% regressors, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$color)
netStats(g)
return(list(g,links))
}
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
mat <- net[[2]]
matrix(data, nrow = rows, ncol = cols)
mat
net <- net[[1]]
data <- toVisNetworkData(net)
data$links
data.nodes
data$edges
tail(data$edge)
runApp('~/Documents/ShinyApp/Network_visualisation')
runApp('~/Documents/ShinyApp/Network_visualisation')
runApp('~/Documents/ShinyApp/Network_visualisation')
runApp('~/Documents/ShinyApp/Network_visualisation')
BiocManager::install("CoRegNet")
library(CoRegNet)
data(CIT_BLCA_EXP,HumanTF,CIT_BLCA_Subgroup)
dim(CIT_BLCA_EXP)
View(CIT_BLCA_EXP)
head(intersect(rownames(CIT_BLCA_EXP),HumanTF))
grn = hLICORN(CIT_BLCA_EXP, TFlist=HumanTF, parallel = "multicore")
# construction du réseau de coregulation
# mettre ici notre discretisation perso si besoin
options("mc.cores"=6)
grn = hLICORN(head(CIT_BLCA_EXP,200), TFlist=HumanTF, parallel = "multicore", verbose = T)
print(grn)
# Uses a network in the form of a coregnet object to compute regulatory influence to estimate
#the transcriptional activity of each regulators in each sample of the given expression data.
# addEvidences to add external evidences
influence = regulatorInfluence(grn,head(CIT_BLCA_EXP,200))
View(influence)
# Based on the frequency and specificity of co-regulation, this functions extracts from a coregnet
# network all the cooperative regulators.
coregs= coregulators(grn)
View(coregs)
display(grn,expressionData=head(CIT_BLCA_EXP,200),TFA=influence)
load("normalized.count_At.RData")
warnings()... =
warnings()
display(grn,expressionData=head(CIT_BLCA_EXP,200),TFA=influence)
grn = hLICORN(head(CIT_BLCA_EXP,100), TFlist=HumanTF, parallel = "multicore", verbose = T)
