message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
specie = "At"
method = "edger"
g = list()
# reference condition as first element of labels
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
sum(genes1$upreg ==1)
a <- OntologyProfile(genes1$genes_id)
genes1$genes_id
genes1
kable(a)
genes1[a$ensembl_gene_id,]$m.value
genes1[a$ensembl_gene_id,]
method = "edger"
g = list()
# reference condition as first element of labels
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
sum(genes1$upreg ==1)
a <- OntologyProfile(genes1$gene_id)
a <- OntologyProfile(genes1$gene_id)
kable(a)
genes1
a$ensembl_gene_id
genes1[genes1$gene_id == a$ensembl_gene_id,]
match(a$ensembl_gene_id,genes1$gene_id)
genes1[match(a$ensembl_gene_id,genes1$gene_id),]
genes1[match(a$ensembl_gene_id,genes1$gene_id),]$m.value
a$flc <- genes1[match(a$ensembl_gene_id,genes1$gene_id),]$m.value
a <- OntologyProfile(genes1$gene_id)
a <- OntologyProfile(genes1$gene_id)
a$flc <- genes1[match(a$ensembl_gene_id,genes1$gene_id),]$m.value
kable(a)
a$p.value <- genes1[match(a$ensembl_gene_id,genes1$gene_id),]$p.value
kable(a)
View(genes1)
a[sort(a$p.value),]
a[sorted(a$p.value),]
a[order(a$p.value),]
a <- a[order(a$p.value),]
kable(a)
genes1
ggplot(genes1) + aes(a.value, m.value) +
geom_point(aes(colour=estimatedDEG)) +
theme_bw()
ggplot(genes1) + aes(a.value, m.value) +
geom_point(aes(colour=estimatedDEG)) +scale_x_log10() +
theme_bw()
ggplot(genes1) + aes(a.value, m.value) +
geom_point(aes(col=estimatedDEG)) +
theme_bw()
ggplot(genes1) + aes(a.value, m.value) +
geom_point(aes(col=estimatedDEG+1)) +
theme_bw()
genes1$estimatedDEG
headers <- c(colnames(data)[(grepl(labels[1], colnames(data)))] , colnames(data)[grepl(labels[2], colnames(data))])
data <- data[headers]
group <- str_split_fixed(colnames(data), "_", 2)[,1]
group <- factor(group)
group <- relevel(group, labels[1])
# tcc object
tcc <- new("TCC", data, group)
print(model.matrix(~group))
print(colnames(data))
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
print(tcc$norm.factors)
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
normalized.count <- getNormalizedData(tcc)
if(plot){
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
}
#DEtest
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
# selecting the right labels for pairwise comparison
headers <- c(colnames(data)[(grepl(labels[1], colnames(data)))] , colnames(data)[grepl(labels[2], colnames(data))])
data <- data[headers]
group <- str_split_fixed(colnames(data), "_", 2)[,1]
group <- factor(group)
group <- relevel(group, labels[1])
# tcc object
tcc <- new("TCC", data, group)
print(model.matrix(~group))
print(colnames(data))
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
print(tcc$norm.factors)
pval=0.01
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
print(tcc$norm.factors)
tcc$DEGES$execution.time
normalized.count <- getNormalizedData(tcc)
#DEtest
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
result
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=estimatedDEG)) +
theme_bw()
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) +
theme_bw()
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Paired2")
theme_bw()
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Paired2") +
theme_bw()
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Set3") +
theme_bw()
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Set2") +
theme_bw()
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Paired") +
theme_bw()
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Paired") +
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Paired")
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Set2")
ggplot(result) + aes(a.value, m.value) +
geom_scatter(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Set2")
ggplot(result) + aes(a.value, m.value) +
geom_point(aes(col=factor(estimatedDEG))) + scale_fill_discrete("Set2")
ggplot(result) + aes(a.value, m.value)+ scale_fill_discrete("Set2")  +
geom_point(aes(col=factor(estimatedDEG)))
ggplot(data = result, aes(a.value, m.value)+ scale_fill_discrete("Set2"))  +
geom_point(aes(col=factor(estimatedDEG)))
ggplot(data = result, aes(a.value, m.value))+ scale_fill_discrete("Set2")  +
geom_point(aes(col=factor(estimatedDEG)))
ggplot(data = result, aes(a.value, m.value))+ scale_color_discrete("Set2")  +
geom_point(aes(col=factor(estimatedDEG)))
ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG)))+ scale_color_discrete("Set2")  +
geom_point()
ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG)))
+ scale_fill_discrete("Set2")  +
geom_point() + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1]))
paste0("M.A Plot : ", labels[2], " vs ", labels[1])
ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG)))
+ scale_fill_discrete("Set2")
+  geom_point() + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1]))
ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point() + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1]))
ggplot(data = result, aes(m.value, q.value, color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point() + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1]))
ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point() + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1]))
dualDE <- function(data, labels, pval=0.01, method="edger", flc_filter = 0, plot=T){
# selecting the right labels for pairwise comparison
headers <- c(colnames(data)[(grepl(labels[1], colnames(data)))] , colnames(data)[grepl(labels[2], colnames(data))])
data <- data[headers]
group <- str_split_fixed(colnames(data), "_", 2)[,1]
group <- factor(group)
group <- relevel(group, labels[1])
# tcc object
tcc <- new("TCC", data, group)
print(model.matrix(~group))
print(colnames(data))
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
print(tcc$norm.factors)
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
normalized.count <- getNormalizedData(tcc)
if(plot){
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
}
#DEtest
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1 & abs(m.value) > flc_filter)
DEgenes$upreg = ifelse(DEgenes$m.value > 0, 1, 0)
print(paste(dim(DEgenes)[1], " genes DE"))
head(result)
if(plot){
ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point() + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1]))
ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point() + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1]))
plotMDS(normalized.count, main="Multidimensional scaling plot of distances between gene expression profiles")
#plot(tcc)
heatmap(normalized.count[DEgenes$gene_id,])
}
return(DEgenes)
}
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
dualDE <- function(data, labels, pval=0.01, method="edger", flc_filter = 0, plot=T){
# selecting the right labels for pairwise comparison
headers <- c(colnames(data)[(grepl(labels[1], colnames(data)))] , colnames(data)[grepl(labels[2], colnames(data))])
data <- data[headers]
group <- str_split_fixed(colnames(data), "_", 2)[,1]
group <- factor(group)
group <- relevel(group, labels[1])
# tcc object
tcc <- new("TCC", data, group)
print(model.matrix(~group))
print(colnames(data))
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
print(tcc$norm.factors)
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
normalized.count <- getNormalizedData(tcc)
if(plot){
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
}
#DEtest
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1 & abs(m.value) > flc_filter)
DEgenes$upreg = ifelse(DEgenes$m.value > 0, 1, 0)
print(paste(dim(DEgenes)[1], " genes DE"))
head(result)
if(plot){
print(ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point() + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1])))
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point() + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1])))
plotMDS(normalized.count, main="Multidimensional scaling plot of distances between gene expression profiles")
#plot(tcc)
heatmap(normalized.count[DEgenes$gene_id,])
}
return(DEgenes)
}
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
specie = "At"
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
dualDE <- function(data, labels, pval=0.01, method="edger", flc_filter = 0, plot=T){
# selecting the right labels for pairwise comparison
headers <- c(colnames(data)[(grepl(labels[1], colnames(data)))] , colnames(data)[grepl(labels[2], colnames(data))])
data <- data[headers]
group <- str_split_fixed(colnames(data), "_", 2)[,1]
group <- factor(group)
group <- relevel(group, labels[1])
# tcc object
tcc <- new("TCC", data, group)
print(model.matrix(~group))
print(colnames(data))
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
print(tcc$norm.factors)
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
normalized.count <- getNormalizedData(tcc)
if(plot){
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
}
#DEtest
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1 & abs(m.value) > flc_filter)
DEgenes$upreg = ifelse(DEgenes$m.value > 0, 1, 0)
print(paste(dim(DEgenes)[1], " genes DE"))
head(result)
if(plot){
print(ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(aplha=0.7) + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1])))
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(aplha=0.7) + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1])))
plotMDS(normalized.count, main="Multidimensional scaling plot of distances between gene expression profiles")
#plot(tcc)
heatmap(normalized.count[DEgenes$gene_id,])
}
return(DEgenes)
}
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
dualDE <- function(data, labels, pval=0.01, method="edger", flc_filter = 0, plot=T){
# selecting the right labels for pairwise comparison
headers <- c(colnames(data)[(grepl(labels[1], colnames(data)))] , colnames(data)[grepl(labels[2], colnames(data))])
data <- data[headers]
group <- str_split_fixed(colnames(data), "_", 2)[,1]
group <- factor(group)
group <- relevel(group, labels[1])
# tcc object
tcc <- new("TCC", data, group)
print(model.matrix(~group))
print(colnames(data))
#2 steps normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = pval, floorPDEG = 0.05)
print(tcc$norm.factors)
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
normalized.count <- getNormalizedData(tcc)
if(plot){
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
}
#DEtest
tcc <- estimateDE(tcc, test.method = method, FDR = pval, design = model.matrix(~group))
result <- getResult(tcc, sort = TRUE)
DEgenes <- subset(result,estimatedDEG==1 & abs(m.value) > flc_filter)
DEgenes$upreg = ifelse(DEgenes$m.value > 0, 1, 0)
print(paste(dim(DEgenes)[1], " genes DE"))
head(result)
if(plot){
print(ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1])))
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1])))
plotMDS(normalized.count, main="Multidimensional scaling plot of distances between gene expression profiles")
#plot(tcc)
heatmap(normalized.count[DEgenes$gene_id,])
}
return(DEgenes)
}
labels <- c("cNf", "CNf")
genes3 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes3
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1]))) +
xlab("Log Fold Change") + ylab("-Log(adj.pvalue)") + theme(
plot.title = element_text( face="bold"))
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1]))) +
xlab("Log Fold Change") + ylab("-Log(adj.pvalue)") + theme(
plot.title = element_text( face="bold")) + labs(fill = "Is DE")
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1]))) +
xlab("Log Fold Change") + ylab("-Log(adj.pvalue)") + theme(
plot.title = element_text( face="bold")) + labs(color = "Is DE")
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1]))) +
xlab("Log Fold Change") + ylab("-Log(adj.pvalue)") + theme(
plot.title = element_text(size = 14, face="bold")) + labs(color = "Is DE")
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1]))) +
xlab("Log Fold Change") + ylab("-Log(adj.pvalue)") + theme(
plot.title = element_text(size = 20, face="bold")) + labs(color = "Is DE")
print(ggplot(data = result, aes(m.value, -log10(q.value), color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("Vulcano Plot : ", labels[2], " vs ", labels[1])) +
xlab("Log Fold Change") + ylab("-Log(adj.pvalue)") + theme(
plot.title = element_text(size = 20, face="bold")) + labs(color = "Is DE"))
print(ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1]))) + xlab("Average expression") + ylab("Log Fold Change")+ theme(
plot.title = element_text(size = 20, face="bold")) + labs(color = "Is DE"))
print(ggplot(data = result, aes(a.value, m.value, color=factor(estimatedDEG))) +
scale_fill_discrete("Set2") + geom_point(alpha=0.7) + ggtitle(paste0("M.A Plot : ", labels[2], " vs ", labels[1])) + xlab("Average expression") + ylab("Log Fold Change")+ theme(
plot.title = element_text(size = 20, face="bold")) + labs(color = "Is DE"))
kable(a)
View(a)
getExpression("AT2G26040", c("cNF", "CNF"))
load("./normalized.count_At.RData")
load("normalized.count_At.RData")
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
getExpression("AT2G26040", c("cNF", "CNF"))
load("normalized.count_At.RData")
load("normalized.count_At.RData")
load("normalized.count_Sl.RData")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
suppressMessages(library(ggplot2))
library(gridExtra)
suppressMessages(library(coseq))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(knitr, warn.conflicts = F, quietly = T))
suppressMessages(library(TCC, warn.conflicts = F, quietly = T))
suppressMessages(library(biomartr))
suppressMessages(library(biomaRt))
suppressMessages(library(ggplot2))
suppressMessages(library(org.At.tair.db, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(DESeq2, warn.conflicts = F, quietly = T))
mart = useMart(biomart="plants_mart",host="plants.ensembl.org", dataset = "athaliana_eg_gene")
#quantification file
data <- read.csv("quantifFiles/quantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
head(data)
dim(data)
# sample matching
annot <- read.csv("Code_for_RNAseq_CO2_N_Fr.csv", h = T, sep = ';')
conditions <- as.vector(unique(annot$Sample))
annot$ID <- paste0('R', annot$Code)
annot$condition <- substr(conditions, 1, nchar(conditions)-1)
cond <- unique(substr(conditions, 1, nchar(conditions)-1))
cond <- cond[grepl("At", cond)]
getCondition <- function(id){
# get condition without replicates
return(annot[annot$ID == id, "condition"])
}
getExactCondition <- function(id){
# get condition with sample
return(annot[annot$ID == id, "Sample"])
}
getLabel <- function(id, with.rep = T){
# get condition with sample in a simplified notation
text <- as.vector(annot[annot$ID == id, "Sample"])
res <- ''
nb <- substr(text, nchar(text), nchar(text))
if(grepl("Ambient", text)){res = paste0(res, "c")}
else{res = paste0(res, "C")}
if(grepl("High", text)){res = paste0(res, "N")}
else{res = paste0(res, "n")}
if(grepl("Starv", text)){res = paste0(res, "f")}
else{res = paste0(res, "F")}
if(with.rep) res = paste0(res, "_", nb)
return(res)
}
getLabel("R6")
getLabel("R6", with.rep=F)
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
tcc <- new("TCC", data, group)
#Normalisation
tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger", iteration = 1, FDR = 0.01, floorPDEG = 0.05)
tcc$norm.factors
tcc$DEGES$execution.time
s <- sample(rownames(tcc$count), size = 200)
heatmap(as.matrix(tcc$count[s,]), main = "Before normalisation")
normalized.count <- getNormalizedData(tcc)
heatmap(as.matrix(normalized.count[s,]), main = "After normalisation")
save(normalized.count, file = "normalized.count_At.RData")
load("normalized.count_At.RData")
save(normalized.count, file = "normalized.count_At2.RData")
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire")
getExpression("AT2G26040", c("cNF", "CNF"))
getExpression("AT1G08090", c("cNF", "CNF"))
hist(genes1$a.value)
log(0.7)
log(-0.7)
log(0.7)
getExpression("AT1G08090", c("cNF", "CNF"))
write_csv(a, quotes=F, sep="\t", row.names=F)
write_table(a, quotes=F, sep="\t", row.names=F, file = "DEGenesCO2Control.txt")
write.table(a, quotes=F, sep="\t", row.names=F, file = "DEGenesCO2Control.txt")
write.table(a, quote=F, sep="\t", row.names=F, file = "DEGenesCO2Control.txt")
