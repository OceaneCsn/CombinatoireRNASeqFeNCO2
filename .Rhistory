c <- ggplot(data, aes(y = Carbone., x = factor(Nom), fill = Nom)) +
geom_boxplot()  +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Carbon rate") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
labs(x = "", y = "Carbon percentage") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
n <- ggplot(data, aes(y = Azote., x = factor(Nom), fill = Nom)) +
geom_boxplot()  +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Nitrate rate") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
labs(x = "", y = "Nitrate percentage") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
nc <- ggplot(data, aes(y = Azote./Carbone., x = factor(Nom), fill = Nom)) +
geom_boxplot() +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Nitrate/Carbon ratio") +
labs(x = "", y = "Nitrate/Carbon ratio") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
grid.arrange(c, n, nc, nrow = 1)
grid.arrange(c, n, nc, nrow = 1)
data <- read.csv("ContrôlesCinétiqueBassine2.csv",h=T,sep=";", stringsAsFactors = F)
data$Carbone. <- as.numeric(gsub(",", ".", gsub("\\.", "", data$Carbone.)))
data$Azote. <- as.numeric(gsub(",", ".", gsub("\\.", "", data$Azote.)))
data$Nom <- str_split_fixed(data$Nom, "-", 2)[,1]
c <- ggplot(data, aes(y = Carbone., x = factor(Nom), fill = Nom)) +
geom_boxplot(alpha = 0.6)  +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Carbon rate") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
labs(x = "", y = "Carbon percentage") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
n <- ggplot(data, aes(y = Azote., x = factor(Nom), fill = Nom)) +
geom_boxplot(alpha = 0.6)  +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Nitrate rate") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
labs(x = "", y = "Nitrate percentage") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
nc <- ggplot(data, aes(y = Azote./Carbone., x = factor(Nom), fill = Nom)) +
geom_boxplot(alpha = 0.6) +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Nitrate/Carbon ratio") +
labs(x = "", y = "Nitrate/Carbon ratio") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
grid.arrange(c, n, nc, nrow = 1)
grid.arrange(c, n, nc, nrow = 1)
data <- read.csv("ContrôlesCinétiqueBassine2.csv",h=T,sep=";", stringsAsFactors = F)
data$Carbone. <- as.numeric(gsub(",", ".", gsub("\\.", "", data$Carbone.)))
data$Azote. <- as.numeric(gsub(",", ".", gsub("\\.", "", data$Azote.)))
data$Nom <- str_split_fixed(data$Nom, "-", 2)[,1]
c <- ggplot(data, aes(y = Carbone., x = factor(Nom), fill = Nom)) +
geom_boxplot(alpha = 0.8)  +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Carbon rate") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
labs(x = "", y = "Carbon percentage") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
n <- ggplot(data, aes(y = Azote., x = factor(Nom), fill = Nom)) +
geom_boxplot(alpha = 0.8)  +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Nitrate rate") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
labs(x = "", y = "Nitrate percentage") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
nc <- ggplot(data, aes(y = Azote./Carbone., x = factor(Nom), fill = Nom)) +
geom_boxplot(alpha = 0.8) +
geom_jitter(width=0.1,alpha=0.2) +
ggtitle("Nitrate/Carbon ratio") +
labs(x = "", y = "Nitrate/Carbon ratio") + scale_fill_brewer(name = "CO2", labels = c("Ambiant", "Elevated"), palette="Set2") +
theme(plot.title = element_text( size = 20, face = "bold")) + stat_compare_means(method = "wilcox.test", hide.ns = FALSE, label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1), symbols = c("wilcox test ****", " wilcox test ***", " wilcox test**",
"wilcox test *", "wilcox test ns")))
grid.arrange(c, n, nc, nrow = 1)
grid.arrange(c, n, nc, nrow = 1)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
exportPath = "~/Documents/CombinatoireFeNCO2/DEG_Combinatoire/Arabidopsis/"
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
specie = "At"
method = "edger"
g = list()
# reference condition as first element of labels
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
sum(genes1$upreg ==1)
a <- OntologyProfile(genes1$gene_id)
a$flc <- genes1[match(a$ensembl_gene_id,genes1$gene_id),]$m.value
a$p.value <- genes1[match(a$ensembl_gene_id,genes1$gene_id),]$p.value
a <- a[order(a$p.value),]
kable(a)
genes1
writeGenes <- function(exportPath, ont, DEresult){
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$p.value
ont <- ont[order(a$p.value),]
return(ont)
}
writeGenes <- function(exportPath, ont, DEresult){
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$p.value
ont <- ont[order(a$p.value),]
return(ont)
}
writeGenes <- function(exportPath, ont, DEresult){
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$p.value
ont <- ont[order(a$p.value),]
return(ont)
}
writeGenes(exportPath = exportPath, ont = a, DEresult = genes1)
b <- writeGenes(exportPath = exportPath, ont = a, DEresult = genes1)
View(b)
paste0(exportPath, '/', paste(labels[1], labels[2]))
paste(labels[1], labels[2]))
paste0(labels[1], '-',labels[2])
writeGenes <- function(exportPath, ont, DEresult){
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$p.value
ont <- ont[order(a$p.value),]
write.table(ont, quote = F, sep = '\t', row.names = F)
return(ont)
}
writeGenes <- function(exportPath, ont, DEresult){
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$p.value
ont <- ont[order(a$p.value),]
write.table(ont, file = exportPath, quote = F, sep = '\t', row.names = F)
return(ont)
}
writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2])), ont = a, DEresult = genes1)
View(genes1)
writeGenes <- function(exportPath, ont, DEresult){
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
write.table(ont, file = exportPath, quote = F, sep = '\t', row.names = F)
return(ont)
}
method = "edger"
g = list()
# reference condition as first element of labels
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
sum(genes1$upreg ==1)
a <- OntologyProfile(genes1$gene_id)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2])), ont = a, DEresult = genes1)
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
a <- OntologyProfile(genes2$gene_id)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2])), ont = a, DEresult = genes2)
paste0(exportPath, paste0(labels[1], '-',labels[2])
paste0(exportPath, paste0(labels[1], '-',labels[2]))
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
a <- OntologyProfile(genes2$gene_id)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2])), ont = a, DEresult = genes2)
writeGenes <- function(exportPath, ont, DEresult){
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
write.table(ont, file = exportPath, quote = F, sep = '\t', row.names = F)
return(ont)
}
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2])), ont = a, DEresult = genes2)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2])), ont = a, DEresult = genes2)
writeGenes <- function(exportPath, ont, DEresult){
print(exportPath)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
write.table(ont, file = exportPath, quote = F, sep = '\t', row.names = F)
return(ont)
}
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2])), ont = a, DEresult = genes2)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
method = "edger"
g = list()
# reference condition as first element of labels
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
sum(genes1$upreg ==1)
a <- OntologyProfile(genes1$gene_id)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes1)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
library(gridExtra)
library(reshape2)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
exportPath = "~/Documents/CombinatoireFeNCO2/DEG_Combinatoire/Arabidopsis/"
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
getLabel("R6")
getExactCondition("R4")
getCondition("R4")
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
head(data)
dim(data)
specie = "At"
method = "edger"
g = list()
# reference condition as first element of labels
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
sum(genes1$upreg ==1)
a <- OntologyProfile(genes1$gene_id)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes1)
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
a <- OntologyProfile(genes2$gene_id)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
writeGenes <- function(exportPath, ont, DEresult){
print(exportPath)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(exportPath)
write.table(ont, file = exportPath, quote = F, sep = '\t', row.names = F)
return(ont)
}
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
writeGenes <- function(exportPath, ont, DEresult){
print(exportPath)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(exportPath)
write.csv(ont, file = exportPath, quote = F, sep = '\t', row.names = F)
return(ont)
}
b <- writeGenes(exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
ont = a, DEresult = genes2
ont = a
DEresult = genes2
exportPath = paste0(exportPath, paste0(labels[1], '-',labels[2],'.txt'))
Path = "~/Documents/CombinatoireFeNCO2/DEG_Combinatoire/Arabidopsis/"
method = "edger"
g = list()
# reference condition as first element of labels
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
sum(genes1$upreg ==1)
a <- OntologyProfile(genes1$gene_id)
b <- writeGenes(exportPath = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes1)
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
a <- OntologyProfile(genes2$gene_id)
b <- writeGenes(exportPath = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
exportPath = paste0(Path, paste0(labels[1], '-',labels[2],'.txt'))
ont = a
DEresult = genes2
write.csv(ont, file = exportPath, quote = F, sep = '\t', row.names = F)
exportPath
writeGenes <- function(export, ont, DEresult){
print(exportPath)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(exportPath)
f <- export
write.csv(ont, file = f, quote = F, sep = '\t', row.names = F)
return(ont)
}
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
labels <- c("cNf", "CNf")
genes3 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes3
a <- OntologyProfile(genes3$gene_id)
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes3)
writeGenes <- function(export, ont, DEresult){
print(exportPath)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(exportPath)
f <- export
print(f)
write.csv(ont, file = f, quote = F, sep = '\t', row.names = F)
return(ont)
}
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes3)
labels <- c("cNf", "CNf")
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes3)
writeGenes <- function(export, ont, DEresult){
print(export)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(export)
f <- export
print(f)
write.csv(ont, file = f, quote = F, sep = '\t', row.names = F)
return(ont)
}
writeGenes <- function(export, ont, DEresult){
print(export)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(export)
f <- export
print(f)
write.csv(ont, file = f, quote = F, sep = '\t', row.names = F)
return(ont)
}
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes3)
writeGenes <- function(export, ont, DEresult){
print(export)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(export)
f <- export
print(f)
write.table(ont, file = "./test", quote = F, sep = '\t', row.names = F)
return(ont)
}
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes3)
writeGenes <- function(export, ont, DEresult){
print(export)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(export)
f <- export
print(f)
write.table(ont, file = f, quote = F, sep = '\t', row.names = F)
print(f)
return(ont)
}
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
writeGenes <- function(export, ont, DEresult){
print(export)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(export)
f <- export
print(f)
write.table(x = ont, file = f, quote = F, sep = '\t', row.names = F)
print(f)
return(ont)
}
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes3)
paste0(Path, paste0(labels[1], '-',labels[2],'.txt'))
export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt'))
export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt'))
write.table(x = ont, file = export, quote = F, sep = '\t', row.names = F)
w <- function(name){
write.table(a, file = name)
}
for (t in c("t1, t2")){
w(t)
}
for (t in c("./t1", "./t2")){
w(t)
}
w <- function(name){
write.table(a, file = name)
}
for (t in c("./t1", "./t2")){
w(t)
}
write.table(a, file = "./T1")
write.table(a, file = "./T1.txt")
setwd("~/Documents/CombinatoireFeNCO2/Combinatoire")
write.table(a, file = "./T1.txt")
for (t in c("./t1", "./t2")){
w(t)
}
writeGenes <- function(export, ont, DEresult){
write.table(x = ont, file = export, quote = F, sep = '\t', row.names = F)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
print(export)
write.table(x = ont, file = export, quote = F, sep = '\t', row.names = F)
return(ont)
}
method = "edger"
g = list()
# reference condition as first element of labels
labels <- c("cNF", "CNF")
genes1 <- dualDE(data, labels, pval = 0.01, method=method)
g[[paste(labels[1], labels[2])]] = genes1
sum(genes1$upreg ==1)
a <- OntologyProfile(genes1$gene_id)
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes1)
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
a <- OntologyProfile(genes2$gene_id)
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes2)
View(b)
writeGenes <- function( ont, DEresult){
#write.table(x = ont, file = export, quote = F, sep = '\t', row.names = F)
ont$flc <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$m.value
ont$adj.p.value <- DEresult[match(ont$ensembl_gene_id,DEresult$gene_id),]$q.value
ont <- ont[order(ont$adj.p.value),]
#write.table(x = ont, file = export, quote = F, sep = '\t', row.names = F)
return(ont)
}
labels <- c("cnF", "CnF")
genes2 <- dualDE(data, labels, pval = 0.01)
g[[paste(labels[1], labels[2])]] = genes2
a <- OntologyProfile(genes2$gene_id)
b <- writeGenes(ont = a, DEresult = genes2)
write.table(x = b, file = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
paste0(Path, paste0(labels[1], '-',labels[2],'.txt'))
paste0(labels[1], '-',labels[2],'.txt'))
paste0(labels[1], '-',labels[2],'.txt')
paste0(Path, paste0(labels[1], '-',labels[2],'.txt'))
write.table(x = b, paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
paste0(Path, paste0(labels[1], '-',labels[2],'.txt'))
write.table(x = b, paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
labels <- c("cNf", "CNf")
b <- writeGenes(export = paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), ont = a, DEresult = genes3)
write.table(x = b, paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
labels <- c("cnF", "CnF")
write.table(x = b, paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
labels <- c("cNf", "CNf")
write.table(x = a, paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
labels <- c("cnF", "CnF")
write.table(x = a, paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
labels <- c("cNf", "CNf")
paste0(Path, paste0(labels[1], '-',labels[2],'.txt'))
write.table(x = a, paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
write.table(x = a, paste0(Path, paste0(labels[1], '-',labels[2],'.txt')), quote = F, sep = '\t', row.names = F)
